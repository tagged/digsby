'''

generates something like:

    module = [
       "list",
       "of internationalizble",
    ]

    module2 = [
        "strings",
    ]

requires:

    "igettext" UNIX tool

use like

    $ python gensearchable.py > prefsearchable.py

'''

import sys
from glob import glob
from util.primitives.misc import backtick

from contextlib import contextmanager

@contextmanager
def stdout_as_stderr():
    from io import BytesIO
    old_stdout, sys.stdout = sys.stdout, BytesIO()
    try:
        yield
    finally:
        stdout, sys.stdout = sys.stdout, old_stdout
        sys.stderr.write(stdout.getvalue())

def find_xgettext():
    # finding xgettext may write to stdout...redirect to stderr so this tool's
    # stdout remains clean
    with stdout_as_stderr():
        try:
            from i18n.generate import check_for_i18n_tools
        except ImportError:
            import sys
            import os.path
            thisdir = os.path.dirname(os.path.abspath(__file__))
            path = os.path.normpath(os.path.join(thisdir, '../../..'))

            sys.path.append(path)
            from i18n.generate import check_for_i18n_tools

        check_for_i18n_tools()


def main():
    find_xgettext()
    print HEADER

    module_names = []
    for f in glob('pg_*.py'):
        module_name = f[3:-3] # get pg_MODULENAME.py
        module_names.append(module_name)

        print '%s = [' % module_name

        for line in backtick('xgettext -D. -LPython --no-wrap --no-location -o- ' + f).split('\n'):
            if line.startswith('msgid '):
                line = line.strip()

                # accumulate all lines like:
                # msgid "some \"quoted\" string"
                s = line[7:-1]
                if s: print '    "' + s.replace('&', '') + '",'

        print ']'
        print

HEADER = '''\
#
# DO NOT EDIT
#
# this file is generated by running gensearchable.py in this directory
#
'''

if __name__ == '__main__': main()
