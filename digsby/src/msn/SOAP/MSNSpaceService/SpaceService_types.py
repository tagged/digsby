##################################################
# file: SpaceService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

import ZSI.wstools.Namespaces as NS
from msn.SOAP import Namespaces as MSNS

##############################
# targetNamespace
# http://www.msn.com/webservices/spaces/v1/
##############################

class spaces:
    targetNamespace = MSNS.MSWS.SPACES

    class elementType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "elementType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.elementType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"totalNewItems"), aname="_totalNewItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"subelementBaseType",lazy=False)(pname=(ns,"subElement"), aname="_subElement", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["type"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._url = None
                    self._totalNewItems = None
                    self._subElement = []
                    return
            Holder.__name__ = "elementType_Holder"
            self.pyclass = Holder

    class subelementBaseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "subelementBaseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.subelementBaseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tooltip"), aname="_tooltip", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["lastUpdated"] = ZSI.TCtimes.gDateTime()
                self.attribute_typecode_dict["type"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._tooltip = None
                    self._title = None
                    self._url = None
                    return
            Holder.__name__ = "subelementBaseType_Holder"
            self.pyclass = Holder

    class elementsType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "elementsType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.elementsType_Def.schema
            TClist = [GTD(MSNS.MSWS.SPACES,"elementType",lazy=False)(pname=(ns,"element"), aname="_element", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["totalMatches"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["returnedMatches"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["displayName"] = ZSI.TC.String()
                self.attribute_typecode_dict["displayPictureUrl"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._element = []
                    return
            Holder.__name__ = "elementsType_Holder"
            self.pyclass = Holder

    class themeType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "themeType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.themeType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"surfaceType",lazy=False)(pname=(ns,"titleBar"), aname="_titleBar", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"clientAreaType",lazy=False)(pname=(ns,"clientArea"), aname="_clientArea", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"surfaceType",lazy=False)(pname=(ns,"toolbar"), aname="_toolbar", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"borderType",lazy=False)(pname=(ns,"border"), aname="_border", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._titleBar = None
                    self._clientArea = None
                    self._toolbar = None
                    self._border = None
                    return
            Holder.__name__ = "themeType_Holder"
            self.pyclass = Holder

    class surfaceType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "surfaceType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.surfaceType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["background"] = ZSI.TC.String()
                self.attribute_typecode_dict["foreground"] = ZSI.TC.String()
                self.attribute_typecode_dict["fontFace"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "surfaceType_Holder"
            self.pyclass = Holder

    class clientAreaType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.SPACES
        type = (schema, "clientAreaType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = spaces.clientAreaType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["backgroundImage"] = ZSI.TC.String()
            if spaces.surfaceType_Def not in spaces.clientAreaType_Def.__bases__:
                bases = list(spaces.clientAreaType_Def.__bases__)
                bases.insert(0, spaces.surfaceType_Def)
                spaces.clientAreaType_Def.__bases__ = tuple(bases)

            spaces.surfaceType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class borderType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "borderType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.borderType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["topLeftImage"] = ZSI.TC.String()
                self.attribute_typecode_dict["bottomLeftImage"] = ZSI.TC.String()
                self.attribute_typecode_dict["topRightImage"] = ZSI.TC.String()
                self.attribute_typecode_dict["bottomRightImage"] = ZSI.TC.String()
                self.attribute_typecode_dict["outline"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "borderType_Holder"
            self.pyclass = Holder

    class liveThemeType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "liveThemeType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.liveThemeType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"themeName"), aname="_themeName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"headType",lazy=False)(pname=(ns,"head"), aname="_head", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"bodyType",lazy=False)(pname=(ns,"body"), aname="_body", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"linkType",lazy=False)(pname=(ns,"actions"), aname="_actions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._themeName = None
                    self._head = None
                    self._body = None
                    self._actions = None
                    return
            Holder.__name__ = "liveThemeType_Holder"
            self.pyclass = Holder

    class linkType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "linkType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.linkType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["linkColor"] = ZSI.TC.String()
                self.attribute_typecode_dict["backgroundColor"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "linkType_Holder"
            self.pyclass = Holder

    class linkTextType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.SPACES
        type = (schema, "linkTextType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = spaces.linkTextType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["textColor"] = ZSI.TC.String()
            if spaces.linkType_Def not in spaces.linkTextType_Def.__bases__:
                bases = list(spaces.linkTextType_Def.__bases__)
                bases.insert(0, spaces.linkType_Def)
                spaces.linkTextType_Def.__bases__ = tuple(bases)

            spaces.linkType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class headType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.SPACES
        type = (schema, "headType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = spaces.headType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["backgroundImage"] = ZSI.TC.String()
            if spaces.linkTextType_Def not in spaces.headType_Def.__bases__:
                bases = list(spaces.headType_Def.__bases__)
                bases.insert(0, spaces.linkTextType_Def)
                spaces.headType_Def.__bases__ = tuple(bases)

            spaces.linkTextType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class bodyType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.SPACES
        type = (schema, "bodyType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = spaces.bodyType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["secondaryLinkColor"] = ZSI.TC.String()
                self.attribute_typecode_dict["dividerColor"] = ZSI.TC.String()
                self.attribute_typecode_dict["accordionHoverColor"] = ZSI.TC.String()
            if spaces.headType_Def not in spaces.bodyType_Def.__bases__:
                bases = list(spaces.bodyType_Def.__bases__)
                bases.insert(0, spaces.headType_Def)
                spaces.bodyType_Def.__bases__ = tuple(bases)

            spaces.headType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class refreshInformationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "refreshInformationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.refreshInformationType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cid"), aname="_cid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"storageAuthCache"), aname="_storageAuthCache", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.AnyType(pname=(ns,"market"), aname="_market", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"brand"), aname="_brand", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iinteger(pname=(ns,"maxElementCount"), aname="_maxElementCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iinteger(pname=(ns,"maxCharacterCount"), aname="_maxCharacterCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iinteger(pname=(ns,"maxImageCount"), aname="_maxImageCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"applicationId"), aname="_applicationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"updateAccessedTime"), aname="_updateAccessedTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCtimes.gDateTime(pname=(ns,"spaceLastViewed"), aname="_spaceLastViewed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"isActiveContact"), aname="_isActiveContact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCtimes.gDateTime(pname=(ns,"profileLastViewed"), aname="_profileLastViewed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCtimes.gDateTime(pname=(ns,"contactProfileLastViewed"), aname="_contactProfileLastViewed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCtimes.gDateTime(pname=(ns,"activeContactLastChanged"), aname="_activeContactLastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cid = None
                    self._storageAuthCache = None
                    self._market = None
                    self._brand = None
                    self._maxElementCount = None
                    self._maxCharacterCount = None
                    self._maxImageCount = None
                    self._applicationId = None
                    self._updateAccessedTime = None
                    self._spaceLastViewed = None
                    self._isActiveContact = None
                    self._profileLastViewed = None
                    self._contactProfileLastViewed = None
                    self._activeContactLastChanged = None
                    return
            Holder.__name__ = "refreshInformationType_Holder"
            self.pyclass = Holder

    class contactCardType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "contactCardType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.contactCardType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"storageAuthCache"), aname="_storageAuthCache", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"elementsType",lazy=False)(pname=(ns,"elements"), aname="_elements", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"themeType",lazy=False)(pname=(ns,"theme"), aname="_theme", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.SPACES,"liveThemeType",lazy=False)(pname=(ns,"liveTheme"), aname="_liveTheme", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"lastUpdate"), aname="_lastUpdate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._storageAuthCache = None
                    self._elements = None
                    self._theme = None
                    self._liveTheme = None
                    self._lastUpdate = None
                    return
            Holder.__name__ = "contactCardType_Holder"
            self.pyclass = Holder

    class spaceContactCardElementsElementPhotoSubElement_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.SPACES
        type = (schema, "spaceContactCardElementsElementPhotoSubElement")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = spaces.spaceContactCardElementsElementPhotoSubElement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"thumbnailUrl"), aname="_thumbnailUrl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"webReadyUrl"), aname="_webReadyUrl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"albumName"), aname="_albumName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if spaces.subelementBaseType_Def not in spaces.spaceContactCardElementsElementPhotoSubElement_Def.__bases__:
                bases = list(spaces.spaceContactCardElementsElementPhotoSubElement_Def.__bases__)
                bases.insert(0, spaces.subelementBaseType_Def)
                spaces.spaceContactCardElementsElementPhotoSubElement_Def.__bases__ = tuple(bases)

            spaces.subelementBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetXmlFeedResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "GetXmlFeedResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.GetXmlFeedResultType_Def.schema
            TClist = [GTD(MSNS.MSWS.SPACES,"contactCardType",lazy=False)(pname=(ns,"contactCard"), aname="_contactCard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactCard = None
                    return
            Holder.__name__ = "GetXmlFeedResultType_Holder"
            self.pyclass = Holder

    class GetXmlFeedRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "GetXmlFeedRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.GetXmlFeedRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.SPACES,"refreshInformationType",lazy=False)(pname=(ns,"refreshInformation"), aname="_refreshInformation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refreshInformation = None
                    return
            Holder.__name__ = "GetXmlFeedRequestType_Holder"
            self.pyclass = Holder

    class GetXmlFeedResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.SPACES
        type = (schema, "GetXmlFeedResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = spaces.GetXmlFeedResponseType_Def.schema
            TClist = [GTD(MSNS.MSWS.SPACES,"GetXmlFeedResultType",lazy=False)(pname=(ns,"GetXmlFeedResult"), aname="_GetXmlFeedResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetXmlFeedResult = None
                    return
            Holder.__name__ = "GetXmlFeedResponseType_Holder"
            self.pyclass = Holder

    class AuthTokenHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AuthTokenHeader"
        schema = MSNS.MSWS.SPACES
        def __init__(self, **kw):
            ns = spaces.AuthTokenHeader_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Token"), aname="_Token", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.SPACES,"AuthTokenHeader")
            kw["aname"] = "_AuthTokenHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Token = None
                    return
            Holder.__name__ = "AuthTokenHeader_Holder"
            self.pyclass = Holder

    class GetXmlFeed_Dec(ElementDeclaration):
        literal = "GetXmlFeed"
        schema = MSNS.MSWS.SPACES
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.SPACES,"GetXmlFeed")
            kw["aname"] = "_GetXmlFeed"
            if spaces.GetXmlFeedRequestType_Def not in spaces.GetXmlFeed_Dec.__bases__:
                bases = list(spaces.GetXmlFeed_Dec.__bases__)
                bases.insert(0, spaces.GetXmlFeedRequestType_Def)
                spaces.GetXmlFeed_Dec.__bases__ = tuple(bases)

            spaces.GetXmlFeedRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetXmlFeed_Dec_Holder"

    class GetXmlFeedResponse_Dec(ElementDeclaration):
        literal = "GetXmlFeedResponse"
        schema = MSNS.MSWS.SPACES
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.SPACES,"GetXmlFeedResponse")
            kw["aname"] = "_GetXmlFeedResponse"
            if spaces.GetXmlFeedResponseType_Def not in spaces.GetXmlFeedResponse_Dec.__bases__:
                bases = list(spaces.GetXmlFeedResponse_Dec.__bases__)
                bases.insert(0, spaces.GetXmlFeedResponseType_Def)
                spaces.GetXmlFeedResponse_Dec.__bases__ = tuple(bases)

            spaces.GetXmlFeedResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetXmlFeedResponse_Dec_Holder"

# end class spaces (tns: http://www.msn.com/webservices/spaces/v1/)

