##################################################
# file: OIMStoreService_client.py
#
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

from OIMStoreService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

import util.callbacks as callbacks
import util.network.soap as soap

import ZSI.wstools.Namespaces as NS
from msn.SOAP import Namespaces as MSNS, MSNBindingSOAP

# Locator
class OIMStoreServiceLocator:
    StorePort_address = "https://ows.messenger.msn.com/OimWS/oim.asmx"
    def getStorePortAddress(self):
        return OIMStoreServiceLocator.StorePort_address
    def getStorePort(self, url=None, **kw):
        return OIMBindingSOAP(url or OIMStoreServiceLocator.StorePort_address, **kw)

# Methods
class OIMBindingSOAP(MSNBindingSOAP):
    # op: Store
    @callbacks.callsback
    def Store(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, StoreMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://messenger.live.com/ws/2006/09/oim/Store2", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

StoreMessage            = GED(MSNS.HMNS.OIM, "MessageType").pyclass
StoreResponseMessage    = GED(MSNS.HMNS.OIM, "StoreResponse").pyclass
