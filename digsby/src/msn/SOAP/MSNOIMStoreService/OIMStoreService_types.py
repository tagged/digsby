##################################################
# file: OIMStoreService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

import ZSI.wstools.Namespaces as NS
from msn.SOAP import Namespaces as MSNS

##############################
# targetNamespace
# http://messenger.msn.com/ws/2004/09/oim/
##############################

class oim:
    targetNamespace = MSNS.HMNS.OIM

    class StoreResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.OIM
        type = (schema, "StoreResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = oim.StoreResultType_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"PointsConsumed"), aname="_PointsConsumed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PointsConsumed = None
                    return
            Holder.__name__ = "StoreResultType_Holder"
            self.pyclass = Holder

    class AuthenticationFailedType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.OIM
        type = (schema, "AuthenticationFailedType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = oim.AuthenticationFailedType_Def.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"faultcode"), aname="_faultcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.HMNS.OIM,"detailType",lazy=False)(pname=(ns,"detail"), aname="_detail", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"faultstring"), aname="_faultstring", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"faultactor"), aname="_faultactor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._faultcode = None
                    self._detail = None
                    self._faultstring = None
                    self._faultactor = None
                    return
            Holder.__name__ = "AuthenticationFailedType_Holder"
            self.pyclass = Holder

    class detailType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.OIM
        type = (schema, "detailType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = oim.detailType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TweenerChallenge"), aname="_TweenerChallenge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LockKeyChallenge"), aname="_LockKeyChallenge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TweenerChallenge = None
                    self._LockKeyChallenge = None
                    return
            Holder.__name__ = "detailType_Holder"
            self.pyclass = Holder

    class From_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "From"
        schema = MSNS.HMNS.OIM
        def __init__(self, **kw):
            ns = oim.From_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.HMNS.OIM,"From")
            kw["aname"] = "_From"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict["memberName"] = ZSI.TC.String()
            self.attribute_typecode_dict["friendlyName"] = ZSI.TC.String()
            self.attribute_typecode_dict[(NS.XMLNS.XML,"lang")] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["proxy"] = ZSI.TC.String()
            self.attribute_typecode_dict["msnpVer"] = ZSI.TC.String()
            self.attribute_typecode_dict["buildVer"] = ZSI.TC.String()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "From_Holder"
            self.pyclass = Holder

    class To_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "To"
        schema = MSNS.HMNS.OIM
        def __init__(self, **kw):
            ns = oim.To_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.HMNS.OIM,"To")
            kw["aname"] = "_To"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict["memberName"] = ZSI.TC.String()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "To_Holder"
            self.pyclass = Holder

    class Ticket_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Ticket"
        schema = MSNS.HMNS.OIM
        def __init__(self, **kw):
            ns = oim.Ticket_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.HMNS.OIM,"Ticket")
            kw["aname"] = "_Ticket"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict["passport"] = ZSI.TC.String()
            self.attribute_typecode_dict["appid"] = ZSI.TC.String()
            self.attribute_typecode_dict["lockkey"] = ZSI.TC.String()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Ticket_Holder"
            self.pyclass = Holder

    class StoreResponse_Dec(ElementDeclaration):
        literal = "StoreResponse"
        schema = MSNS.HMNS.OIM
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.OIM,"StoreResponse")
            kw["aname"] = "_StoreResponse"
            if oim.StoreResultType_Def not in oim.StoreResponse_Dec.__bases__:
                bases = list(oim.StoreResponse_Dec.__bases__)
                bases.insert(0, oim.StoreResultType_Def)
                oim.StoreResponse_Dec.__bases__ = tuple(bases)

            oim.StoreResultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "StoreResponse_Dec_Holder"

    class AuthenticationFailed_Dec(ElementDeclaration):
        literal = "AuthenticationFailed"
        schema = MSNS.HMNS.OIM
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.OIM,"AuthenticationFailed")
            kw["aname"] = "_AuthenticationFailed"
            if oim.AuthenticationFailedType_Def not in oim.AuthenticationFailed_Dec.__bases__:
                bases = list(oim.AuthenticationFailed_Dec.__bases__)
                bases.insert(0, oim.AuthenticationFailedType_Def)
                oim.AuthenticationFailed_Dec.__bases__ = tuple(bases)

            oim.AuthenticationFailedType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AuthenticationFailed_Dec_Holder"

    class MessageType_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "MessageType"
        schema = MSNS.HMNS.OIM
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.OIM,"MessageType")
            kw["aname"] = "_MessageType"
            ZSI.TC.String.__init__(self, **kw)
            class IHolder(str): typecode=self
            self.pyclass = IHolder
            IHolder.__name__ = "_MessageType_immutable_holder"

    class Content_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "Content"
        schema = MSNS.HMNS.OIM
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.OIM,"Content")
            kw["aname"] = "_Content"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_Content_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

# end class oim (tns: http://messenger.msn.com/ws/2004/09/oim/)

