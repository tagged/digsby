##################################################
# file: RSIService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

import ZSI.wstools.Namespaces as NS
from msn.SOAP import Namespaces as MSNS

##############################
# targetNamespace
# http://www.hotmail.msn.com/ws/2004/09/oim/rsi
##############################

class rsi:
    targetNamespace = MSNS.HMNS.RSI

    class MetadataMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "MetadataMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.MetadataMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"T"), aname="_T", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"S"), aname="_S", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"RT"), aname="_RT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"RS"), aname="_RS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"SZ"), aname="_SZ", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"E"), aname="_E", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"I"), aname="_I", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"F"), aname="_F", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"N"), aname="_N", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SU"), aname="_SU", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._T = None
                    self._S = None
                    self._RT = None
                    self._RS = None
                    self._SZ = None
                    self._E = None
                    self._I = None
                    self._F = None
                    self._N = None
                    self._SU = None
                    return
            Holder.__name__ = "MetadataMessage_Holder"
            self.pyclass = Holder

    class MetaData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "MetaData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.MetaData_Def.schema
            TClist = [GTD(MSNS.HMNS.RSI,"MetadataMessage",lazy=False)(pname=(ns,"M"), aname="_M", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Q_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._M = []
                    self._Q = None
                    return
            Holder.__name__ = "MetaData_Holder"
            self.pyclass = Holder


        class Q_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Q"
            schema = MSNS.HMNS.RSI
            def __init__(self, **kw):
                ns = rsi.MetaData_Def.Q_Dec.schema
                TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"QTM"), aname="_QTM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"QNM"), aname="_QNM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.HMNS.RSI,"Q")
                kw["aname"] = "_Q"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._QTM = None
                        self._QNM = None
                        return
                Holder.__name__ = "Q_Holder"
                self.pyclass = Holder




    class GetMetadataRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "GetMetadataRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.GetMetadataRequestType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetMetadataRequestType_Holder"
            self.pyclass = Holder

    class GetMetadataResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "GetMetadataResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.GetMetadataResponseType_Def.schema
            TClist = [GTD(MSNS.HMNS.RSI,"MetaData",lazy=False)(pname=(ns,"MD"), aname="_MD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MD = None
                    return
            Holder.__name__ = "GetMetadataResponseType_Holder"
            self.pyclass = Holder

    class GetMessageRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "GetMessageRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.GetMessageRequestType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"messageId"), aname="_messageId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"alsoMarkAsRead"), aname="_alsoMarkAsRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._alsoMarkAsRead = None
                    return
            Holder.__name__ = "GetMessageRequestType_Holder"
            self.pyclass = Holder

    class GetMessageResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "GetMessageResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.GetMessageResponseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetMessageResult"), aname="_GetMessageResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetMessageResult = None
                    return
            Holder.__name__ = "GetMessageResponseType_Holder"
            self.pyclass = Holder

    class DeleteMessagesRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "DeleteMessagesRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.DeleteMessagesRequestType_Def.schema
            TClist = [self.__class__.messageIds_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageIds = None
                    return
            Holder.__name__ = "DeleteMessagesRequestType_Holder"
            self.pyclass = Holder


        class messageIds_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "messageIds"
            schema = MSNS.HMNS.RSI
            def __init__(self, **kw):
                ns = rsi.DeleteMessagesRequestType_Def.messageIds_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"messageId"), aname="_messageId", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.HMNS.RSI,"messageIds")
                kw["aname"] = "_messageIds"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._messageId = []
                        return
                Holder.__name__ = "messageIds_Holder"
                self.pyclass = Holder




    class DeleteMessagesResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.HMNS.RSI
        type = (schema, "DeleteMessagesResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = rsi.DeleteMessagesResponseType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "DeleteMessagesResponseType_Holder"
            self.pyclass = Holder

    class PassportCookie_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PassportCookie"
        schema = MSNS.HMNS.RSI
        def __init__(self, **kw):
            ns = rsi.PassportCookie_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"t"), aname="_t", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"p"), aname="_p", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.HMNS.RSI,"PassportCookie")
            kw["aname"] = "_PassportCookie"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._t = None
                    self._p = None
                    return
            Holder.__name__ = "PassportCookie_Holder"
            self.pyclass = Holder

    class GetMetadata_Dec(ElementDeclaration):
        literal = "GetMetadata"
        schema = MSNS.HMNS.RSI
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"GetMetadata")
            kw["aname"] = "_GetMetadata"
            if rsi.GetMetadataRequestType_Def not in rsi.GetMetadata_Dec.__bases__:
                bases = list(rsi.GetMetadata_Dec.__bases__)
                bases.insert(0, rsi.GetMetadataRequestType_Def)
                rsi.GetMetadata_Dec.__bases__ = tuple(bases)

            rsi.GetMetadataRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMetadata_Dec_Holder"

    class GetMetadataResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "GetMetadataResponse"
        schema = MSNS.HMNS.RSI
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"GetMetadataResponse")
            kw["aname"] = "_GetMetadataResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

    class GetMetadataResponse2_Dec(ElementDeclaration):
        literal = "GetMetadataResponse2"
        schema = MSNS.HMNS.RSI
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"GetMetadataResponse2")
            kw["aname"] = "_GetMetadataResponse2"
            if rsi.GetMetadataResponseType_Def not in rsi.GetMetadataResponse2_Dec.__bases__:
                bases = list(rsi.GetMetadataResponse2_Dec.__bases__)
                bases.insert(0, rsi.GetMetadataResponseType_Def)
                rsi.GetMetadataResponse2_Dec.__bases__ = tuple(bases)

            rsi.GetMetadataResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMetadataResponse2_Dec_Holder"

    class GetMessage_Dec(ElementDeclaration):
        literal = "GetMessage"
        schema = MSNS.HMNS.RSI
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"GetMessage")
            kw["aname"] = "_GetMessage"
            if rsi.GetMessageRequestType_Def not in rsi.GetMessage_Dec.__bases__:
                bases = list(rsi.GetMessage_Dec.__bases__)
                bases.insert(0, rsi.GetMessageRequestType_Def)
                rsi.GetMessage_Dec.__bases__ = tuple(bases)

            rsi.GetMessageRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMessage_Dec_Holder"

    class GetMessageResponse_Dec(ElementDeclaration):
        literal = "GetMessageResponse"
        schema = MSNS.HMNS.RSI
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"GetMessageResponse")
            kw["aname"] = "_GetMessageResponse"
            if rsi.GetMessageResponseType_Def not in rsi.GetMessageResponse_Dec.__bases__:
                bases = list(rsi.GetMessageResponse_Dec.__bases__)
                bases.insert(0, rsi.GetMessageResponseType_Def)
                rsi.GetMessageResponse_Dec.__bases__ = tuple(bases)

            rsi.GetMessageResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMessageResponse_Dec_Holder"

    class DeleteMessages_Dec(ElementDeclaration):
        literal = "DeleteMessages"
        schema = MSNS.HMNS.RSI
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"DeleteMessages")
            kw["aname"] = "_DeleteMessages"
            if rsi.DeleteMessagesRequestType_Def not in rsi.DeleteMessages_Dec.__bases__:
                bases = list(rsi.DeleteMessages_Dec.__bases__)
                bases.insert(0, rsi.DeleteMessagesRequestType_Def)
                rsi.DeleteMessages_Dec.__bases__ = tuple(bases)

            rsi.DeleteMessagesRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeleteMessages_Dec_Holder"

    class DeleteMessagesResponse_Dec(ElementDeclaration):
        literal = "DeleteMessagesResponse"
        schema = MSNS.HMNS.RSI
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.HMNS.RSI,"DeleteMessagesResponse")
            kw["aname"] = "_DeleteMessagesResponse"
            if rsi.DeleteMessagesResponseType_Def not in rsi.DeleteMessagesResponse_Dec.__bases__:
                bases = list(rsi.DeleteMessagesResponse_Dec.__bases__)
                bases.insert(0, rsi.DeleteMessagesResponseType_Def)
                rsi.DeleteMessagesResponse_Dec.__bases__ = tuple(bases)

            rsi.DeleteMessagesResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeleteMessagesResponse_Dec_Holder"

    class AuthenticationFailed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AuthenticationFailed"
        schema = MSNS.HMNS.RSI
        def __init__(self, **kw):
            ns = rsi.AuthenticationFailed_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"TweenerChallenge"), aname="_TweenerChallenge", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.HMNS.RSI,"AuthenticationFailed")
            kw["aname"] = "_AuthenticationFailed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TweenerChallenge = None
                    return
            Holder.__name__ = "AuthenticationFailed_Holder"
            self.pyclass = Holder

# end class rsi (tns: http://www.hotmail.msn.com/ws/2004/09/oim/rsi)
