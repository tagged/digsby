##################################################
# file: SharingService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

from msn.SOAP import Namespaces as MSNS

##############################
# targetNamespace
# http://www.msn.com/webservices/AddressBook
##############################

class msnab:
    targetNamespace = MSNS.MSWS.ADDRESS

    class abInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "abInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.abInfoType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ownerPuid"), aname="_ownerPuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"OwnerCID"), aname="_OwnerCID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ownerEmail"), aname="_ownerEmail", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"fDefault"), aname="_fDefault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"joinedNamespace"), aname="_joinedNamespace", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsBot"), aname="_IsBot", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsParentManaged"), aname="_IsParentManaged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"SubscribeExternalPartner"), aname="_SubscribeExternalPartner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"NotifyExternalPartner"), aname="_NotifyExternalPartner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AddressBookType"), aname="_AddressBookType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MessengerApplicationServiceCreated"), aname="_MessengerApplicationServiceCreated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsBetaMigrated"), aname="_IsBetaMigrated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MigratedTo"), aname="_MigratedTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._ownerPuid = None
                    self._OwnerCID = None
                    self._ownerEmail = None
                    self._fDefault = None
                    self._joinedNamespace = None
                    self._IsBot = None
                    self._IsParentManaged = None
                    self._SubscribeExternalPartner = None
                    self._NotifyExternalPartner = None
                    self._AddressBookType = None
                    self._MessengerApplicationServiceCreated = None
                    self._IsBetaMigrated = None
                    self._MigratedTo = None
                    return
            Holder.__name__ = "abInfoType_Holder"
            self.pyclass = Holder

    class HandleType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "HandleType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.HandleType_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ForeignId"), aname="_ForeignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Type = None
                    self._ForeignId = None
                    return
            Holder.__name__ = "HandleType_Holder"
            self.pyclass = Holder

    class ServiceType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ServiceType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ServiceType_Def.schema
            TClist = [self.__class__.Memberships_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"InfoType",lazy=False)(pname=(ns,"Info"), aname="_Info", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Changes"), aname="_Changes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChange"), aname="_LastChange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Deleted"), aname="_Deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Memberships = None
                    self._Info = None
                    self._Changes = None
                    self._LastChange = None
                    self._Deleted = None
                    return
            Holder.__name__ = "ServiceType_Holder"
            self.pyclass = Holder


        class Memberships_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Memberships"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ServiceType_Def.Memberships_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Membership",lazy=False)(pname=(ns,"Membership"), aname="_Membership", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Memberships")
                kw["aname"] = "_Memberships"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Membership = []
                        return
                Holder.__name__ = "Memberships_Holder"
                self.pyclass = Holder




    class Membership_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "Membership")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.Membership_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"MemberRole"), aname="_MemberRole", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Members_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MembershipIsComplete"), aname="_MembershipIsComplete", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MemberRole = None
                    self._Members = None
                    self._MembershipIsComplete = None
                    return
            Holder.__name__ = "Membership_Holder"
            self.pyclass = Holder


        class Members_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Members"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.Membership_Def.Members_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"BaseMember",lazy=False)(pname=(ns,"Member"), aname="_Member", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Members")
                kw["aname"] = "_Members"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Member = []
                        return
                Holder.__name__ = "Members_Holder"
                self.pyclass = Holder




    class BaseMember_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "BaseMember")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.BaseMember_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"MembershipId"), aname="_MembershipId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.Location_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"MemberState",lazy=False)(pname=(ns,"State"), aname="_State", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.Annotations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"Deleted"), aname="_Deleted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"LastChanged"), aname="_LastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"JoinedDate"), aname="_JoinedDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"ExpirationDate"), aname="_ExpirationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Changes"), aname="_Changes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MembershipId = None
                    self._Type = None
                    self._Location = None
                    self._DisplayName = None
                    self._State = None
                    self._Annotations = None
                    self._Deleted = None
                    self._LastChanged = None
                    self._JoinedDate = None
                    self._ExpirationDate = None
                    self._Changes = None
                    return
            Holder.__name__ = "BaseMember_Holder"
            self.pyclass = Holder


        class Location_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Location"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.BaseMember_Def.Location_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsPassportNameHidden"), aname="_IsPassportNameHidden", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"CID"), aname="_CID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Location")
                kw["aname"] = "_Location"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Id = None
                        self._IsPassportNameHidden = None
                        self._CID = None
                        return
                Holder.__name__ = "Location_Holder"
                self.pyclass = Holder





        class Annotations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Annotations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.BaseMember_Def.Annotations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Annotation",lazy=False)(pname=(ns,"Annotation"), aname="_Annotation", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Annotations")
                kw["aname"] = "_Annotations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Annotation = []
                        return
                Holder.__name__ = "Annotations_Holder"
                self.pyclass = Holder




    class CircleMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CircleMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.CircleMember_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"CircleId"), aname="_CircleId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.CircleMember_Def.__bases__:
                bases = list(msnab.CircleMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.CircleMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PassportMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "PassportMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.PassportMember_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PassportName"), aname="_PassportName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"IsPassportNameHidden"), aname="_IsPassportNameHidden", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"PassportId"), aname="_PassportId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Ilong(pname=(ns,"CID"), aname="_CID", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"PassportChanges"), aname="_PassportChanges", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.PassportMember_Def.__bases__:
                bases = list(msnab.PassportMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.PassportMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EmailMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "EmailMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.EmailMember_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Email"), aname="_Email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.EmailMember_Def.__bases__:
                bases = list(msnab.EmailMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.EmailMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PhoneMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "PhoneMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.PhoneMember_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PhoneNumber"), aname="_PhoneNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.PhoneMember_Def.__bases__:
                bases = list(msnab.PhoneMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.PhoneMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RoleMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "RoleMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.RoleMember_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.DefiningService_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"MaxRoleRecursionDepth"), aname="_MaxRoleRecursionDepth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"MaxDegreesSeparation"), aname="_MaxDegreesSeparation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.RoleMember_Def.__bases__:
                bases = list(msnab.RoleMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.RoleMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class DefiningService_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "DefiningService"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.RoleMember_Def.DefiningService_Dec.schema
                TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ForeignId"), aname="_ForeignId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"DefiningService")
                kw["aname"] = "_DefiningService"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Id = None
                        self._Type = None
                        self._ForeignId = None
                        return
                Holder.__name__ = "DefiningService_Holder"
                self.pyclass = Holder




    class ServiceMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ServiceMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.ServiceMember_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"HandleType",lazy=False)(pname=(ns,"Service"), aname="_Service", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.ServiceMember_Def.__bases__:
                bases = list(msnab.ServiceMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.ServiceMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DomainMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "DomainMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.DomainMember_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"DomainName"), aname="_DomainName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.DomainMember_Def.__bases__:
                bases = list(msnab.DomainMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.DomainMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EveryoneMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "EveryoneMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.EveryoneMember_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.EveryoneMember_Def.__bases__:
                bases = list(msnab.EveryoneMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.EveryoneMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PartnerMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "PartnerMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.PartnerMember_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"AppId"), aname="_AppId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"Scope"), aname="_Scope", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.PartnerMember_Def.__bases__:
                bases = list(msnab.PartnerMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.PartnerMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GroupMember_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "GroupMember")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.GroupMember_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseMember_Def not in msnab.GroupMember_Def.__bases__:
                bases = list(msnab.GroupMember_Def.__bases__)
                bases.insert(0, msnab.BaseMember_Def)
                msnab.GroupMember_Def.__bases__ = tuple(bases)

            msnab.BaseMember_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Guid_Def(ZSI.TC.String, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "Guid")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MemberState_Def(ZSI.TC.String, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "MemberState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Annotation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "Annotation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.Annotation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Value"), aname="_Value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Value = None
                    return
            Holder.__name__ = "Annotation_Holder"
            self.pyclass = Holder

    class ContactType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ContactType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"contactId"), aname="_contactId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"contactInfoType",lazy=False)(pname=(ns,"contactInfo"), aname="_contactInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"fDeleted"), aname="_fDeleted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CreateDate"), aname="_CreateDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastModifiedBy"), aname="_LastModifiedBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"CreatedBy"), aname="_CreatedBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactId = None
                    self._contactInfo = None
                    self._propertiesChanged = None
                    self._fDeleted = None
                    self._lastChange = None
                    self._CreateDate = None
                    self._LastModifiedBy = None
                    self._CreatedBy = None
                    return
            Holder.__name__ = "ContactType_Holder"
            self.pyclass = Holder

    class ContactIdType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactIdType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ContactIdType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"contactId"), aname="_contactId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactId = None
                    return
            Holder.__name__ = "ContactIdType_Holder"
            self.pyclass = Holder

    class contactInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "contactInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.contactInfoType_Def.schema
            TClist = [self.__class__.emails_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.phones_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.locations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.webSites_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.annotations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.groupIds_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.groupIdsDeleted_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"contactType"), aname="_contactType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"quickName"), aname="_quickName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"firstName"), aname="_firstName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"MiddleName"), aname="_MiddleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"lastName"), aname="_lastName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Suffix"), aname="_Suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"NameTitle"), aname="_NameTitle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"passportName"), aname="_passportName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"IsPassportNameHidden"), aname="_IsPassportNameHidden", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"displayName"), aname="_displayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Ilong(pname=(ns,"puid"), aname="_puid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Ilong(pname=(ns,"CID"), aname="_CID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.AnyType(pname=(ns,"BrandIdList"), aname="_BrandIdList", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"comment"), aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"IsNotMobileVisible"), aname="_IsNotMobileVisible", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"isMobileIMEnabled"), aname="_isMobileIMEnabled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"isMessengerUser"), aname="_isMessengerUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"isFavorite"), aname="_isFavorite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"isSmtp"), aname="_isSmtp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"hasSpace"), aname="_hasSpace", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"spotWatchState"), aname="_spotWatchState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"birthdate"), aname="_birthdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"ContactEmailTypeType",lazy=False)(pname=(ns,"primaryEmailType"), aname="_primaryEmailType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"ContactLocationTypeType",lazy=False)(pname=(ns,"PrimaryLocation"), aname="_PrimaryLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"ContactPhoneTypeType",lazy=False)(pname=(ns,"PrimaryPhone"), aname="_PrimaryPhone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"IsPrivate"), aname="_IsPrivate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Anniversary"), aname="_Anniversary", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Gender"), aname="_Gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"TimeZone"), aname="_TimeZone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.NetworkInfoList_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"PublicDisplayName"), aname="_PublicDisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"IsAutoUpdateDisabled"), aname="_IsAutoUpdateDisabled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"MessengerMemberInfo",lazy=False)(pname=(ns,"MessengerMemberInfo"), aname="_MessengerMemberInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.AnyType(pname=(ns,"PropertiesChanged"), aname="_PropertiesChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"clientErrorData"), aname="_clientErrorData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"IsHidden"), aname="_IsHidden", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]

            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._emails = None
                    self._phones = None
                    self._locations = None
                    self._webSites = None
                    self._annotations = None
                    self._groupIds = None
                    self._groupIdsDeleted = None
                    self._contactType = None
                    self._quickName = None
                    self._firstName = None
                    self._MiddleName = None
                    self._lastName = None
                    self._Suffix = None
                    self._NameTitle = None
                    self._passportName = None
                    self._IsPassportNameHidden = None
                    self._displayName = None
                    self._puid = None
                    self._CID = None
                    self._BrandIdList = None
                    self._comment = None
                    self._IsNotMobileVisible = None
                    self._isMobileIMEnabled = None
                    self._isMessengerUser = None
                    self._isFavorite = None
                    self._isSmtp = None
                    self._hasSpace = None
                    self._spotWatchState = None
                    self._birthdate = None
                    self._primaryEmailType = None
                    self._PrimaryLocation = None
                    self._PrimaryPhone = None
                    self._IsPrivate = None
                    self._Anniversary = None
                    self._Gender = None
                    self._TimeZone = None
                    self._NetworkInfoList = None
                    self._PublicDisplayName = None
                    self._IsAutoUpdateDisabled = None
                    self._MessengerMemberInfo = None
                    self._PropertiesChanged = None
                    self._clientErrorData = None
                    self._IsHidden = None
                    return
            Holder.__name__ = "contactInfoType_Holder"
            self.pyclass = Holder


        class emails_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "emails"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.emails_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"contactEmailType",lazy=False)(pname=(ns,"ContactEmail"), aname="_ContactEmail", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"emails")
                kw["aname"] = "_emails"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ContactEmail = []
                        return
                Holder.__name__ = "emails_Holder"
                self.pyclass = Holder





        class phones_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "phones"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.phones_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"contactPhoneType",lazy=False)(pname=(ns,"ContactPhone"), aname="_ContactPhone", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"phones")
                kw["aname"] = "_phones"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ContactPhone = []
                        return
                Holder.__name__ = "phones_Holder"
                self.pyclass = Holder





        class locations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "locations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.locations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"contactLocationType",lazy=False)(pname=(ns,"ContactLocation"), aname="_ContactLocation", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"locations")
                kw["aname"] = "_locations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ContactLocation = []
                        return
                Holder.__name__ = "locations_Holder"
                self.pyclass = Holder





        class webSites_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "webSites"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.webSites_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"contactWebSiteType",lazy=False)(pname=(ns,"ContactWebSite"), aname="_ContactWebSite", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"webSites")
                kw["aname"] = "_webSites"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ContactWebSite = []
                        return
                Holder.__name__ = "webSites_Holder"
                self.pyclass = Holder





        class annotations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "annotations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.annotations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Annotation",lazy=False)(pname=(ns,"Annotation"), aname="_Annotation", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"annotations")
                kw["aname"] = "_annotations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Annotation = []
                        return
                Holder.__name__ = "annotations_Holder"
                self.pyclass = Holder





        class groupIds_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groupIds"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.groupIds_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"guid"), aname="_guid", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groupIds")
                kw["aname"] = "_groupIds"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._guid = []
                        return
                Holder.__name__ = "groupIds_Holder"
                self.pyclass = Holder





        class groupIdsDeleted_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groupIdsDeleted"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.groupIdsDeleted_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"guid"), aname="_guid", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groupIdsDeleted")
                kw["aname"] = "_groupIdsDeleted"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._guid = []
                        return
                Holder.__name__ = "groupIdsDeleted_Holder"
                self.pyclass = Holder





        class NetworkInfoList_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "NetworkInfoList"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.contactInfoType_Def.NetworkInfoList_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"NetworkInfoType",lazy=False)(pname=(ns,"NetworkInfo"), aname="_NetworkInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"NetworkInfoList")
                kw["aname"] = "_NetworkInfoList"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._NetworkInfo = []
                        return
                Holder.__name__ = "NetworkInfoList_Holder"
                self.pyclass = Holder




    class contactEmailType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "contactEmailType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.contactEmailType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactEmailTypeType",lazy=False)(pname=(ns,"contactEmailType"), aname="_contactEmailType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isMessengerEnabled"), aname="_isMessengerEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"Capability"), aname="_Capability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MessengerEnabledExternally"), aname="_MessengerEnabledExternally", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactEmailType = None
                    self._email = None
                    self._isMessengerEnabled = None
                    self._Capability = None
                    self._MessengerEnabledExternally = None
                    self._propertiesChanged = None
                    return
            Holder.__name__ = "contactEmailType_Holder"
            self.pyclass = Holder

    class ContactEmailTypeType_Def(ZSI.TC.String, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactEmailTypeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class contactPhoneType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "contactPhoneType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.contactPhoneType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactPhoneTypeType",lazy=False)(pname=(ns,"contactPhoneType"), aname="_contactPhoneType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isMessengerEnabled"), aname="_isMessengerEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactPhoneType = None
                    self._number = None
                    self._isMessengerEnabled = None
                    self._propertiesChanged = None
                    return
            Holder.__name__ = "contactPhoneType_Holder"
            self.pyclass = Holder

    class ContactPhoneTypeType_Def(ZSI.TC.String, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactPhoneTypeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class contactLocationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "contactLocationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.contactLocationType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactLocationTypeType",lazy=False)
                        (pname=(ns,"contactLocationType"), aname="_contactLocationType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"street"), aname="_street", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"country"), aname="_country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Department"), aname="_Department", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Changes"), aname="_Changes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactLocationType = None
                    self._name = None
                    self._street = None
                    self._city = None
                    self._state = None
                    self._country = None
                    self._postalCode = None
                    self._Department = None
                    self._Changes = None
                    return
            Holder.__name__ = "contactLocationType_Holder"
            self.pyclass = Holder

    class ContactLocationTypeType_Def(ZSI.TC.String, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactLocationTypeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class contactWebSiteType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "contactWebSiteType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.contactWebSiteType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactWebSiteTypeType",lazy=False)(pname=(ns,"contactWebSiteType"), aname="_contactWebSiteType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"webURL"), aname="_webURL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactWebSiteType = None
                    self._webURL = None
                    return
            Holder.__name__ = "contactWebSiteType_Holder"
            self.pyclass = Holder

    class ContactWebSiteTypeType_Def(ZSI.TC.String, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactWebSiteTypeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GroupType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "GroupType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.GroupType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"groupId"), aname="_groupId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"groupInfoType",lazy=False)(pname=(ns,"groupInfo"), aname="_groupInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"fDeleted"), aname="_fDeleted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupId = None
                    self._groupInfo = None
                    self._propertiesChanged = None
                    self._fDeleted = None
                    self._lastChange = None
                    return
            Holder.__name__ = "GroupType_Holder"
            self.pyclass = Holder

    class groupInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "groupInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.groupInfoType_Def.schema
            TClist = [self.__class__.annotations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"groupType"), aname="_groupType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsNotMobileVisible"), aname="_IsNotMobileVisible", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsPrivate"), aname="_IsPrivate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsFavorite"), aname="_IsFavorite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"fMessenger"), aname="_fMessenger", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._annotations = None
                    self._groupType = None
                    self._name = None
                    self._IsNotMobileVisible = None
                    self._IsPrivate = None
                    self._IsFavorite = None
                    self._fMessenger = None
                    return
            Holder.__name__ = "groupInfoType_Holder"
            self.pyclass = Holder


        class annotations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "annotations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.groupInfoType_Def.annotations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Annotation",lazy=False)(pname=(ns,"Annotation"), aname="_Annotation", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"annotations")
                kw["aname"] = "_annotations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Annotation = []
                        return
                Holder.__name__ = "annotations_Holder"
                self.pyclass = Holder




    class groupFilterType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "groupFilterType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.groupFilterType_Def.schema
            TClist = [self.__class__.groupIds_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupIds = None
                    return
            Holder.__name__ = "groupFilterType_Holder"
            self.pyclass = Holder


        class groupIds_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groupIds"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.groupFilterType_Def.groupIds_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"guid"), aname="_guid", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groupIds")
                kw["aname"] = "_groupIds"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._guid = []
                        return
                Holder.__name__ = "groupIds_Holder"
                self.pyclass = Holder




    class MessengerMemberInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "MessengerMemberInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.MessengerMemberInfo_Def.schema
            TClist = [self.__class__.PendingAnnotations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PendingAnnotations = None
                    self._DisplayName = None
                    return
            Holder.__name__ = "MessengerMemberInfo_Holder"
            self.pyclass = Holder


        class PendingAnnotations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "PendingAnnotations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.MessengerMemberInfo_Def.PendingAnnotations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Annotation",lazy=False)(pname=(ns,"Annotation"), aname="_Annotation", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"PendingAnnotations")
                kw["aname"] = "_PendingAnnotations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Annotation = []
                        return
                Holder.__name__ = "PendingAnnotations_Holder"
                self.pyclass = Holder




    class InfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "InfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.InfoType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"HandleType",lazy=False)(pname=(ns,"Handle"), aname="_Handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"InverseRequired"), aname="_InverseRequired", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AuthorizationCriteria"), aname="_AuthorizationCriteria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"RSSUrl"), aname="_RSSUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsBot"), aname="_IsBot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Handle = None
                    self._DisplayName = None
                    self._InverseRequired = None
                    self._AuthorizationCriteria = None
                    self._RSSUrl = None
                    self._IsBot = None
                    return
            Holder.__name__ = "InfoType_Holder"
            self.pyclass = Holder

    class NotificationDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "NotificationDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.NotificationDataType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ServiceType",lazy=False)(pname=(ns,"StoreService"), aname="_StoreService", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChanged"), aname="_LastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Gleam"), aname="_Gleam", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InstanceId"), aname="_InstanceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._StoreService = None
                    self._Status = None
                    self._LastChanged = None
                    self._Gleam = None
                    self._InstanceId = None
                    return
            Holder.__name__ = "NotificationDataType_Holder"
            self.pyclass = Holder

    class BaseDynamicItemType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "BaseDynamicItemType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.BaseDynamicItemType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Deleted"), aname="_Deleted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChanged"), aname="_LastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Notifications_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Changes"), aname="_Changes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Type = None
                    self._Deleted = None
                    self._LastChanged = None
                    self._Notifications = None
                    self._Changes = None
                    return
            Holder.__name__ = "BaseDynamicItemType_Holder"
            self.pyclass = Holder


        class Notifications_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Notifications"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.BaseDynamicItemType_Def.Notifications_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"NotificationDataType",lazy=False)(pname=(ns,"NotificationData"), aname="_NotificationData", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Notifications")
                kw["aname"] = "_Notifications"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._NotificationData = []
                        return
                Holder.__name__ = "Notifications_Holder"
                self.pyclass = Holder




    class CircleDynamicItem_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CircleDynamicItem")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.CircleDynamicItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseDynamicItemType_Def not in msnab.CircleDynamicItem_Def.__bases__:
                bases = list(msnab.CircleDynamicItem_Def.__bases__)
                bases.insert(0, msnab.BaseDynamicItemType_Def)
                msnab.CircleDynamicItem_Def.__bases__ = tuple(bases)

            msnab.BaseDynamicItemType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PassportDynamicItem_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "PassportDynamicItem")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.PassportDynamicItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CID"), aname="_CID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PassportName"), aname="_PassportName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PassportId"), aname="_PassportId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpaceStatus"), aname="_SpaceStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpaceLastChanged"), aname="_SpaceLastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpaceLastViewed"), aname="_SpaceLastViewed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"SpaceGleam"), aname="_SpaceGleam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProfileLastChanged"), aname="_ProfileLastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProfileLastView"), aname="_ProfileLastView", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProfileStatus"), aname="_ProfileStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ProfileGleam"), aname="_ProfileGleam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContactProfileStatus"), aname="_ContactProfileStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContactProfileLastChanged"), aname="_ContactProfileLastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContactProfileLastViewed"), aname="_ContactProfileLastViewed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LiveContactLastChanged"), aname="_LiveContactLastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.BaseDynamicItemType_Def not in msnab.PassportDynamicItem_Def.__bases__:
                bases = list(msnab.PassportDynamicItem_Def.__bases__)
                bases.insert(0, msnab.BaseDynamicItemType_Def)
                msnab.PassportDynamicItem_Def.__bases__ = tuple(bases)

            msnab.BaseDynamicItemType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class abType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "abType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.abType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"abInfoType",lazy=False)(pname=(ns,"abInfo"), aname="_abInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DynamicItemLastChanged"), aname="_DynamicItemLastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RecentActivityItemLastChanged"), aname="_RecentActivityItemLastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"createDate"), aname="_createDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._abInfo = None
                    self._lastChange = None
                    self._DynamicItemLastChanged = None
                    self._RecentActivityItemLastChanged = None
                    self._createDate = None
                    self._propertiesChanged = None
                    return
            Holder.__name__ = "abType_Holder"
            self.pyclass = Holder

    class CircleResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CircleResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CircleResultType_Def.schema
            TClist = [self.__class__.Circles_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CircleTicket"), aname="_CircleTicket", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Circles = None
                    self._CircleTicket = None
                    return
            Holder.__name__ = "CircleResultType_Holder"
            self.pyclass = Holder


        class Circles_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Circles"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.CircleResultType_Def.Circles_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"CircleInverseInfoType",lazy=False)(pname=(ns,"CircleInverseInfo"), aname="_CircleInverseInfo", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Circles")
                kw["aname"] = "_Circles"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._CircleInverseInfo = []
                        return
                Holder.__name__ = "Circles_Holder"
                self.pyclass = Holder




    class NetworkInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "NetworkInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.NetworkInfoType_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"DomainId"), aname="_DomainId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DomainTag"), aname="_DomainTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserTileURL"), aname="_UserTileURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProfileURL"), aname="_ProfileURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RelationshipType"), aname="_RelationshipType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RelationshipState"), aname="_RelationshipState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RelationshipStateDate"), aname="_RelationshipStateDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RelationshipRole"), aname="_RelationshipRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NDRCount"), aname="_NDRCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InviterName"), aname="_InviterName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InviterMessage"), aname="_InviterMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"InviterCID"), aname="_InviterCID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InviterEmail"), aname="_InviterEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CreateDate"), aname="_CreateDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChanged"), aname="_LastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"PropertiesChanged"), aname="_PropertiesChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SourceId"), aname="_SourceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DomainId = None
                    self._DomainTag = None
                    self._DisplayName = None
                    self._UserTileURL = None
                    self._ProfileURL = None
                    self._RelationshipType = None
                    self._RelationshipState = None
                    self._RelationshipStateDate = None
                    self._RelationshipRole = None
                    self._NDRCount = None
                    self._InviterName = None
                    self._InviterMessage = None
                    self._InviterCID = None
                    self._InviterEmail = None
                    self._CreateDate = None
                    self._LastChanged = None
                    self._PropertiesChanged = None
                    self._SourceId = None
                    return
            Holder.__name__ = "NetworkInfoType_Holder"
            self.pyclass = Holder

    class ContactFilterType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContactFilterType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ContactFilterType_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"IncludeHiddenContacts"), aname="_IncludeHiddenContacts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._IncludeHiddenContacts = None
                    return
            Holder.__name__ = "ContactFilterType_Holder"
            self.pyclass = Holder

    class filterOptionsType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "filterOptionsType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.filterOptionsType_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"DeltasOnly"), aname="_DeltasOnly", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChanged"), aname="_LastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"ContactFilterType",lazy=False)(pname=(ns,"ContactFilter"), aname="_ContactFilter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DeltasOnly = None
                    self._LastChanged = None
                    self._ContactFilter = None
                    return
            Holder.__name__ = "filterOptionsType_Holder"
            self.pyclass = Holder

    class entityHandle_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "entityHandle")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.entityHandle_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"Cid"), aname="_Cid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Cid = None
                    return
            Holder.__name__ = "entityHandle_Holder"
            self.pyclass = Holder

    class NotationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "NotationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.NotationType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Value"), aname="_Value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Value = None
                    return
            Holder.__name__ = "NotationType_Holder"
            self.pyclass = Holder

    class ListTemplateVariableItemType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ListTemplateVariableItemType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ListTemplateVariableItemType_Def.schema
            TClist = [self.__class__.Values_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Values = None
                    return
            Holder.__name__ = "ListTemplateVariableItemType_Holder"
            self.pyclass = Holder


        class Values_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Values"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ListTemplateVariableItemType_Def.Values_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"SimpleTemplateVariableBaseType",lazy=False)(pname=(ns,"Value"), aname="_Value", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Values")
                kw["aname"] = "_Values"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Value = []
                        return
                Holder.__name__ = "Values_Holder"
                self.pyclass = Holder




    class TemplateVariableBaseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "TemplateVariableBaseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.TemplateVariableBaseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    return
            Holder.__name__ = "TemplateVariableBaseType_Holder"
            self.pyclass = Holder

    class SimpleTemplateVariableBaseType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "SimpleTemplateVariableBaseType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.SimpleTemplateVariableBaseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Value"), aname="_Value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.TemplateVariableBaseType_Def not in msnab.SimpleTemplateVariableBaseType_Def.__bases__:
                bases = list(msnab.SimpleTemplateVariableBaseType_Def.__bases__)
                bases.insert(0, msnab.TemplateVariableBaseType_Def)
                msnab.SimpleTemplateVariableBaseType_Def.__bases__ = tuple(bases)

            msnab.TemplateVariableBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PublisherIdTemplateVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "PublisherIdTemplateVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.PublisherIdTemplateVariable_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NameHint"), aname="_NameHint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.TemplateVariableBaseType_Def not in msnab.PublisherIdTemplateVariable_Def.__bases__:
                bases = list(msnab.PublisherIdTemplateVariable_Def.__bases__)
                bases.insert(0, msnab.TemplateVariableBaseType_Def)
                msnab.PublisherIdTemplateVariable_Def.__bases__ = tuple(bases)

            msnab.TemplateVariableBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TargetIdTemplateVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "TargetIdTemplateVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.TargetIdTemplateVariable_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"IdOwner"), aname="_IdOwner", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.PublisherIdTemplateVariable_Def not in msnab.TargetIdTemplateVariable_Def.__bases__:
                bases = list(msnab.TargetIdTemplateVariable_Def.__bases__)
                bases.insert(0, msnab.PublisherIdTemplateVariable_Def)
                msnab.TargetIdTemplateVariable_Def.__bases__ = tuple(bases)

            msnab.PublisherIdTemplateVariable_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TextTemplateVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "TextTemplateVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.TextTemplateVariable_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.SimpleTemplateVariableBaseType_Def not in msnab.TextTemplateVariable_Def.__bases__:
                bases = list(msnab.TextTemplateVariable_Def.__bases__)
                bases.insert(0, msnab.SimpleTemplateVariableBaseType_Def)
                msnab.TextTemplateVariable_Def.__bases__ = tuple(bases)

            msnab.SimpleTemplateVariableBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HlinkTemplateVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "HlinkTemplateVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.HlinkTemplateVariable_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Text"), aname="_Text", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Notations_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.SimpleTemplateVariableBaseType_Def not in msnab.HlinkTemplateVariable_Def.__bases__:
                bases = list(msnab.HlinkTemplateVariable_Def.__bases__)
                bases.insert(0, msnab.SimpleTemplateVariableBaseType_Def)
                msnab.HlinkTemplateVariable_Def.__bases__ = tuple(bases)

            msnab.SimpleTemplateVariableBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Notations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Notations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.HlinkTemplateVariable_Def.Notations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"NotationType",lazy=False)(pname=(ns,"Notation"), aname="_Notation", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Notations")
                kw["aname"] = "_Notations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Notation = []
                        return
                Holder.__name__ = "Notations_Holder"
                self.pyclass = Holder




    class ListTemplateVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ListTemplateVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.ListTemplateVariable_Def.schema
            TClist = [self.__class__.Items_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.TemplateVariableBaseType_Def not in msnab.ListTemplateVariable_Def.__bases__:
                bases = list(msnab.ListTemplateVariable_Def.__bases__)
                bases.insert(0, msnab.TemplateVariableBaseType_Def)
                msnab.ListTemplateVariable_Def.__bases__ = tuple(bases)

            msnab.TemplateVariableBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Items_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Items"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ListTemplateVariable_Def.Items_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ListTemplateVariableItemType",lazy=False)(pname=(ns,"ListTemplateVariableItem"), aname="_ListTemplateVariableItem", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Items")
                kw["aname"] = "_Items"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ListTemplateVariableItem = []
                        return
                Holder.__name__ = "Items_Holder"
                self.pyclass = Holder




    class ImageTemplateVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ImageTemplateVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnab.ImageTemplateVariable_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"Href"), aname="_Href", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Notations_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnab.SimpleTemplateVariableBaseType_Def not in msnab.ImageTemplateVariable_Def.__bases__:
                bases = list(msnab.ImageTemplateVariable_Def.__bases__)
                bases.insert(0, msnab.SimpleTemplateVariableBaseType_Def)
                msnab.ImageTemplateVariable_Def.__bases__ = tuple(bases)

            msnab.SimpleTemplateVariableBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Notations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Notations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ImageTemplateVariable_Def.Notations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"NotationType",lazy=False)(pname=(ns,"Notation"), aname="_Notation", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Notations")
                kw["aname"] = "_Notations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Notation = []
                        return
                Holder.__name__ = "Notations_Holder"
                self.pyclass = Holder




    class ActivityDetailsType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ActivityDetailsType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ActivityDetailsType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"OwnerCID"), aname="_OwnerCID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ObjectId"), aname="_ObjectId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationId"), aname="_ApplicationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ChangeType"), aname="_ChangeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PublishDate"), aname="_PublishDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.TemplateVariables_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OwnerCID = None
                    self._ObjectId = None
                    self._ApplicationId = None
                    self._ChangeType = None
                    self._PublishDate = None
                    self._TemplateVariables = None
                    return
            Holder.__name__ = "ActivityDetailsType_Holder"
            self.pyclass = Holder


        class TemplateVariables_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "TemplateVariables"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ActivityDetailsType_Def.TemplateVariables_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"TemplateVariableBaseType",lazy=False)(pname=(ns,"TemplateVariable"), aname="_TemplateVariable", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"TemplateVariables")
                kw["aname"] = "_TemplateVariables"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._TemplateVariable = []
                        return
                Holder.__name__ = "TemplateVariables_Holder"
                self.pyclass = Holder




    class RecentActivityTemplateType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "RecentActivityTemplateType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.RecentActivityTemplateType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Cardinality"), aname="_Cardinality", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Data"), aname="_Data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Cardinality = None
                    self._Data = None
                    self._Title = None
                    return
            Holder.__name__ = "RecentActivityTemplateType_Holder"
            self.pyclass = Holder

    class RequestedLocalesType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "RequestedLocalesType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.RequestedLocalesType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "RequestedLocalesType_Holder"
            self.pyclass = Holder

    class RecentActivityTemplateContainerType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "RecentActivityTemplateContainerType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.RecentActivityTemplateContainerType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ApplicationId"), aname="_ApplicationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationName"), aname="_ApplicationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"ChangeType"), aname="_ChangeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Locale"), aname="_Locale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"RequestedLocalesType",lazy=False)(pname=(ns,"RequestedLocales"), aname="_RequestedLocales", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"TemplateRevision"), aname="_TemplateRevision", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Templates_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"CollapseConditionType",lazy=False)(pname=(ns,"CollapseCondition"), aname="_CollapseCondition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ApplicationId = None
                    self._ApplicationName = None
                    self._ChangeType = None
                    self._Locale = None
                    self._RequestedLocales = None
                    self._TemplateRevision = None
                    self._Templates = None
                    self._CollapseCondition = None
                    return
            Holder.__name__ = "RecentActivityTemplateContainerType_Holder"
            self.pyclass = Holder


        class Templates_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Templates"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.RecentActivityTemplateContainerType_Def.Templates_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"RecentActivityTemplateType",lazy=False)(pname=(ns,"RecentActivityTemplate"), aname="_RecentActivityTemplate", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Templates")
                kw["aname"] = "_Templates"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._RecentActivityTemplate = []
                        return
                Holder.__name__ = "Templates_Holder"
                self.pyclass = Holder




    class CollapseConditionType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CollapseConditionType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CollapseConditionType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "CollapseConditionType_Holder"
            self.pyclass = Holder

    class CirclePersonalMembershipType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CirclePersonalMembershipType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CirclePersonalMembershipType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Role"), aname="_Role", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Role = None
                    self._State = None
                    return
            Holder.__name__ = "CirclePersonalMembershipType_Holder"
            self.pyclass = Holder

    class abHandleType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "abHandleType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.abHandleType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ABId"), aname="_ABId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"Puid"), aname="_Puid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"Cid"), aname="_Cid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABId = None
                    self._Puid = None
                    self._Cid = None
                    return
            Holder.__name__ = "abHandleType_Holder"
            self.pyclass = Holder

    class contactHandleType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "contactHandleType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.contactHandleType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Email"), aname="_Email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"Puid"), aname="_Puid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"Cid"), aname="_Cid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CircleId"), aname="_CircleId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Email = None
                    self._Puid = None
                    self._Cid = None
                    self._CircleId = None
                    return
            Holder.__name__ = "contactHandleType_Holder"
            self.pyclass = Holder

    class MembershipInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "MembershipInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.MembershipInfoType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"CirclePersonalMembershipType",lazy=False)(pname=(ns,"CirclePersonalMembership"), aname="_CirclePersonalMembership", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CirclePersonalMembership = None
                    return
            Holder.__name__ = "MembershipInfoType_Holder"
            self.pyclass = Holder

    class PersonalInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "PersonalInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.PersonalInfoType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"MembershipInfoType",lazy=False)(pname=(ns,"MembershipInfo"), aname="_MembershipInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsNotMobileVisible"), aname="_IsNotMobileVisible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsFavorite"), aname="_IsFavorite", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsFamily"), aname="_IsFamily", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"Changes"), aname="_Changes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MembershipInfo = None
                    self._Name = None
                    self._IsNotMobileVisible = None
                    self._IsFavorite = None
                    self._IsFamily = None
                    self._Changes = None
                    return
            Holder.__name__ = "PersonalInfoType_Holder"
            self.pyclass = Holder

    class ContentInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContentInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ContentInfoType_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Domain"), aname="_Domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HostedDomain"), aname="_HostedDomain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MembershipAccess"), aname="_MembershipAccess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsPresenceEnabled"), aname="_IsPresenceEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RequestMembershipOption"), aname="_RequestMembershipOption", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProfileLastUpdated"), aname="_ProfileLastUpdated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"Changes"), aname="_Changes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CreateDate"), aname="_CreateDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChanged"), aname="_LastChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Domain = None
                    self._HostedDomain = None
                    self._Type = None
                    self._MembershipAccess = None
                    self._IsPresenceEnabled = None
                    self._RequestMembershipOption = None
                    self._DisplayName = None
                    self._ProfileLastUpdated = None
                    self._Changes = None
                    self._CreateDate = None
                    self._LastChanged = None
                    return
            Holder.__name__ = "ContentInfoType_Holder"
            self.pyclass = Holder

    class ContentHandleType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContentHandleType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ContentHandleType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    return
            Holder.__name__ = "ContentHandleType_Holder"
            self.pyclass = Holder

    class ContentType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ContentType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ContentType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContentHandleType",lazy=False)(pname=(ns,"Handle"), aname="_Handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"ContentInfoType",lazy=False)(pname=(ns,"Info"), aname="_Info", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Handle = None
                    self._Info = None
                    return
            Holder.__name__ = "ContentType_Holder"
            self.pyclass = Holder

    class CircleInverseInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CircleInverseInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CircleInverseInfoType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContentType",lazy=False)(pname=(ns,"Content"), aname="_Content", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"PersonalInfoType",lazy=False)(pname=(ns,"PersonalInfo"), aname="_PersonalInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Deleted"), aname="_Deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Content = None
                    self._PersonalInfo = None
                    self._Deleted = None
                    return
            Holder.__name__ = "CircleInverseInfoType_Holder"
            self.pyclass = Holder

    class callerInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "callerInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.callerInfoType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PublicDisplayName"), aname="_PublicDisplayName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PublicDisplayName = None
                    return
            Holder.__name__ = "callerInfoType_Holder"
            self.pyclass = Holder

    class OwnerNamespaceType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "OwnerNamespaceType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.OwnerNamespaceType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"OwnerNamespaceInfoType",lazy=False)(pname=(ns,"Info"), aname="_Info", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Changes"), aname="_Changes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CreateDate"), aname="_CreateDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastChange"), aname="_LastChange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Info = None
                    self._Changes = None
                    self._CreateDate = None
                    self._LastChange = None
                    return
            Holder.__name__ = "OwnerNamespaceType_Holder"
            self.pyclass = Holder

    class CircleAttributesType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CircleAttributesType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CircleAttributesType_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"IsPresenceEnabled"), aname="_IsPresenceEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsEvent"), aname="_IsEvent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Domain"), aname="_Domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._IsPresenceEnabled = None
                    self._IsEvent = None
                    self._Domain = None
                    return
            Holder.__name__ = "CircleAttributesType_Holder"
            self.pyclass = Holder

    class OwnerNamespaceInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "OwnerNamespaceInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.OwnerNamespaceInfoType_Def.schema
            TClist = [self.__class__.Handle_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"CreatorPuid"), aname="_CreatorPuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"CreatorCID"), aname="_CreatorCID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CreatorPassportName"), aname="_CreatorPassportName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"CircleAttributesType",lazy=False)(pname=(ns,"CircleAttributes"), aname="_CircleAttributes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MessengerApplicationServiceCreated"), aname="_MessengerApplicationServiceCreated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Handle = None
                    self._CreatorPuid = None
                    self._CreatorCID = None
                    self._CreatorPassportName = None
                    self._CircleAttributes = None
                    self._MessengerApplicationServiceCreated = None
                    return
            Holder.__name__ = "OwnerNamespaceInfoType_Holder"
            self.pyclass = Holder


        class Handle_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Handle"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.OwnerNamespaceInfoType_Def.Handle_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsPassportNameHidden"), aname="_IsPassportNameHidden", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"CID"), aname="_CID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Handle")
                kw["aname"] = "_Handle"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Id = None
                        self._IsPassportNameHidden = None
                        self._CID = None
                        return
                Holder.__name__ = "Handle_Holder"
                self.pyclass = Holder




    class FindMembershipRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "FindMembershipRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.FindMembershipRequestType_Def.schema
            TClist = [self.__class__.serviceFilter_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"View"), aname="_View", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"deltasOnly"), aname="_deltasOnly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serviceFilter = None
                    self._View = None
                    self._deltasOnly = None
                    self._lastChange = None
                    return
            Holder.__name__ = "FindMembershipRequestType_Holder"
            self.pyclass = Holder


        class serviceFilter_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "serviceFilter"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.FindMembershipRequestType_Def.serviceFilter_Dec.schema
                TClist = [self.__class__.Types_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"serviceFilter")
                kw["aname"] = "_serviceFilter"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Types = None
                        return
                Holder.__name__ = "serviceFilter_Holder"
                self.pyclass = Holder


            class Types_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Types"
                schema = MSNS.MSWS.ADDRESS
                def __init__(self, **kw):
                    ns = msnab.FindMembershipRequestType_Def.serviceFilter_Dec.Types_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"ServiceType"), aname="_ServiceType", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = (MSNS.MSWS.ADDRESS,"Types")
                    kw["aname"] = "_Types"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ServiceType = []
                            return
                    Holder.__name__ = "Types_Holder"
                    self.pyclass = Holder







    class FindMembershipResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "FindMembershipResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.FindMembershipResultType_Def.schema
            TClist = [self.__class__.Services_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"OwnerNamespaceType",lazy=False)(pname=(ns,"OwnerNamespace"), aname="_OwnerNamespace", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Services = None
                    self._OwnerNamespace = None
                    return
            Holder.__name__ = "FindMembershipResultType_Holder"
            self.pyclass = Holder


        class Services_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Services"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.FindMembershipResultType_Def.Services_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ServiceType",lazy=False)(pname=(ns,"Service"), aname="_Service", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Services")
                kw["aname"] = "_Services"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Service = []
                        return
                Holder.__name__ = "Services_Holder"
                self.pyclass = Holder




    class ABFindAllRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABFindAllRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABFindAllRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"abView"), aname="_abView", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deltasOnly"), aname="_deltasOnly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dynamicItemView"), aname="_dynamicItemView", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dynamicItemLastChange"), aname="_dynamicItemLastChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._abView = None
                    self._deltasOnly = None
                    self._lastChange = None
                    self._dynamicItemView = None
                    self._dynamicItemLastChange = None
                    return
            Holder.__name__ = "ABFindAllRequestType_Holder"
            self.pyclass = Holder

    class ABFindAllResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABFindAllResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABFindAllResultType_Def.schema
            TClist = [self.__class__.groups_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.contacts_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.DynamicItems_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.CircleResult_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")),
                      self.__class__.ab_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groups = None
                    self._contacts = None
                    self._DynamicItems = None
                    self._CircleResult = None
                    self._ab = None
                    return
            Holder.__name__ = "ABFindAllResultType_Holder"
            self.pyclass = Holder


        class groups_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groups"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindAllResultType_Def.groups_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"GroupType",lazy=False)(pname=(ns,"Group"), aname="_Group", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groups")
                kw["aname"] = "_groups"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Group = []
                        return
                Holder.__name__ = "groups_Holder"
                self.pyclass = Holder





        class contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindAllResultType_Def.contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"contacts")
                kw["aname"] = "_contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "contacts_Holder"
                self.pyclass = Holder





        class DynamicItems_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "DynamicItems"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindAllResultType_Def.DynamicItems_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"BaseDynamicItemType",lazy=False)(pname=(ns,"DynamicItem"), aname="_DynamicItem", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"DynamicItems")
                kw["aname"] = "_DynamicItems"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._DynamicItem = []
                        return
                Holder.__name__ = "DynamicItems_Holder"
                self.pyclass = Holder





        class CircleResult_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "CircleResult"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindAllResultType_Def.CircleResult_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"CircleTicket"), aname="_CircleTicket", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"CircleResult")
                kw["aname"] = "_CircleResult"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._CircleTicket = None
                        return
                Holder.__name__ = "CircleResult_Holder"
                self.pyclass = Holder





        class ab_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ab"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindAllResultType_Def.ab_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"abInfoType",lazy=False)(pname=(ns,"abInfo"), aname="_abInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DynamicItemLastChanged"), aname="_DynamicItemLastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RecentActivityItemLastChanged"), aname="_RecentActivityItemLastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"createDate"), aname="_createDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"ab")
                kw["aname"] = "_ab"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._abId = None
                        self._abInfo = None
                        self._lastChange = None
                        self._DynamicItemLastChanged = None
                        self._RecentActivityItemLastChanged = None
                        self._createDate = None
                        self._propertiesChanged = None
                        return
                Holder.__name__ = "ab_Holder"
                self.pyclass = Holder




    class ABContactAddRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABContactAddRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABContactAddRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.contacts_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.options_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._contacts = None
                    self._options = None
                    return
            Holder.__name__ = "ABContactAddRequestType_Holder"
            self.pyclass = Holder


        class contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABContactAddRequestType_Def.contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"contacts")
                kw["aname"] = "_contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "contacts_Holder"
                self.pyclass = Holder





        class options_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "options"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABContactAddRequestType_Def.options_Dec.schema
                TClist = [ZSI.TC.Boolean(pname=(ns,"EnableAllowListManagement"), aname="_EnableAllowListManagement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"options")
                kw["aname"] = "_options"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._EnableAllowListManagement = None
                        return
                Holder.__name__ = "options_Holder"
                self.pyclass = Holder




    class ABContactAddResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABContactAddResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABContactAddResultType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"guid"), aname="_guid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._guid = None
                    return
            Holder.__name__ = "ABContactAddResultType_Holder"
            self.pyclass = Holder

    class ABContactDeleteRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABContactDeleteRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABContactDeleteRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.contacts_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._contacts = None
                    return
            Holder.__name__ = "ABContactDeleteRequestType_Holder"
            self.pyclass = Holder


        class contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABContactDeleteRequestType_Def.contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactIdType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"contacts")
                kw["aname"] = "_contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "contacts_Holder"
                self.pyclass = Holder




    class ABGroupContactAddRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupContactAddRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupContactAddRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"groupFilterType",lazy=False)(pname=(ns,"groupFilter"), aname="_groupFilter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.contacts_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.groupContactAddOptions_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._groupFilter = None
                    self._contacts = None
                    self._groupContactAddOptions = None
                    return
            Holder.__name__ = "ABGroupContactAddRequestType_Holder"
            self.pyclass = Holder


        class contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABGroupContactAddRequestType_Def.contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"contacts")
                kw["aname"] = "_contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "contacts_Holder"
                self.pyclass = Holder





        class groupContactAddOptions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groupContactAddOptions"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABGroupContactAddRequestType_Def.groupContactAddOptions_Dec.schema
                TClist = [ZSI.TC.Boolean(pname=(ns,"fGenerateMissingQuickName"), aname="_fGenerateMissingQuickName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"EnableAllowListManagement"), aname="_EnableAllowListManagement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groupContactAddOptions")
                kw["aname"] = "_groupContactAddOptions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._fGenerateMissingQuickName = None
                        self._EnableAllowListManagement = None
                        return
                Holder.__name__ = "groupContactAddOptions_Holder"
                self.pyclass = Holder




    class ABGroupContactAddResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupContactAddResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupContactAddResultType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"guid"), aname="_guid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._guid = None
                    return
            Holder.__name__ = "ABGroupContactAddResultType_Holder"
            self.pyclass = Holder

    class ABGroupAddRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupAddRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupAddRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.groupAddOptions_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.groupInfo_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._groupAddOptions = None
                    self._groupInfo = None
                    return
            Holder.__name__ = "ABGroupAddRequestType_Holder"
            self.pyclass = Holder


        class groupAddOptions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groupAddOptions"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABGroupAddRequestType_Def.groupAddOptions_Dec.schema
                TClist = [ZSI.TC.Boolean(pname=(ns,"fRenameOnMsgrConflict"), aname="_fRenameOnMsgrConflict", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groupAddOptions")
                kw["aname"] = "_groupAddOptions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._fRenameOnMsgrConflict = None
                        return
                Holder.__name__ = "groupAddOptions_Holder"
                self.pyclass = Holder





        class groupInfo_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groupInfo"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABGroupAddRequestType_Def.groupInfo_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"groupInfoType",lazy=False)(pname=(ns,"GroupInfo"), aname="_GroupInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groupInfo")
                kw["aname"] = "_groupInfo"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._GroupInfo = None
                        return
                Holder.__name__ = "groupInfo_Holder"
                self.pyclass = Holder




    class ABGroupAddResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupAddResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupAddResultType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"guid"), aname="_guid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._guid = None
                    return
            Holder.__name__ = "ABGroupAddResultType_Holder"
            self.pyclass = Holder

    class ABGroupUpdateRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupUpdateRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupUpdateRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.groups_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._groups = None
                    return
            Holder.__name__ = "ABGroupUpdateRequestType_Holder"
            self.pyclass = Holder


        class groups_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "groups"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABGroupUpdateRequestType_Def.groups_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"GroupType",lazy=False)(pname=(ns,"Group"), aname="_Group", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"groups")
                kw["aname"] = "_groups"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Group = []
                        return
                Holder.__name__ = "groups_Holder"
                self.pyclass = Holder




    class ABGroupDeleteRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupDeleteRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupDeleteRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"groupFilterType",lazy=False)(pname=(ns,"groupFilter"), aname="_groupFilter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._groupFilter = None
                    return
            Holder.__name__ = "ABGroupDeleteRequestType_Holder"
            self.pyclass = Holder

    class ABContactUpdateRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABContactUpdateRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABContactUpdateRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.contacts_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._contacts = None
                    return
            Holder.__name__ = "ABContactUpdateRequestType_Holder"
            self.pyclass = Holder


        class contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABContactUpdateRequestType_Def.contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"contacts")
                kw["aname"] = "_contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "contacts_Holder"
                self.pyclass = Holder




    class ABGroupContactDeleteRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABGroupContactDeleteRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABGroupContactDeleteRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.contacts_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"groupFilterType",lazy=False)(pname=(ns,"groupFilter"), aname="_groupFilter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._contacts = None
                    self._groupFilter = None
                    return
            Holder.__name__ = "ABGroupContactDeleteRequestType_Holder"
            self.pyclass = Holder


        class contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABGroupContactDeleteRequestType_Def.contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"contacts")
                kw["aname"] = "_contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "contacts_Holder"
                self.pyclass = Holder




    class AddMemberRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "AddMemberRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.AddMemberRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"HandleType",lazy=False)(pname=(ns,"serviceHandle"), aname="_serviceHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.memberships_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serviceHandle = None
                    self._memberships = None
                    return
            Holder.__name__ = "AddMemberRequestType_Holder"
            self.pyclass = Holder


        class memberships_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "memberships"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.AddMemberRequestType_Def.memberships_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Membership",lazy=False)(pname=(ns,"Membership"), aname="_Membership", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"memberships")
                kw["aname"] = "_memberships"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Membership = []
                        return
                Holder.__name__ = "memberships_Holder"
                self.pyclass = Holder




    class DeleteMemberRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "DeleteMemberRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.DeleteMemberRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"HandleType",lazy=False)(pname=(ns,"serviceHandle"), aname="_serviceHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.memberships_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"ContentHandleType",lazy=False)(pname=(ns,"nsHandle"), aname="_nsHandle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serviceHandle = None
                    self._memberships = None
                    self._nsHandle = None
                    return
            Holder.__name__ = "DeleteMemberRequestType_Holder"
            self.pyclass = Holder


        class memberships_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "memberships"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.DeleteMemberRequestType_Def.memberships_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Membership",lazy=False)(pname=(ns,"Membership"), aname="_Membership", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"memberships")
                kw["aname"] = "_memberships"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Membership = []
                        return
                Holder.__name__ = "memberships_Holder"
                self.pyclass = Holder




    class ABAddResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABAddResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABAddResponseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ABAddResult"), aname="_ABAddResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABAddResult = None
                    return
            Holder.__name__ = "ABAddResponseType_Holder"
            self.pyclass = Holder

    class ABAddRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABAddRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABAddRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"abInfoType",lazy=False)(pname=(ns,"abInfo"), aname="_abInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abInfo = None
                    return
            Holder.__name__ = "ABAddRequestType_Holder"
            self.pyclass = Holder

    class UpdateDynamicItemRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "UpdateDynamicItemRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.UpdateDynamicItemRequestType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.dynamicItems_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._dynamicItems = None
                    return
            Holder.__name__ = "UpdateDynamicItemRequestType_Holder"
            self.pyclass = Holder


        class dynamicItems_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "dynamicItems"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.UpdateDynamicItemRequestType_Def.dynamicItems_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"BaseDynamicItemType",lazy=False)(pname=(ns,"DynamicItem"), aname="_DynamicItem", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"dynamicItems")
                kw["aname"] = "_dynamicItems"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._DynamicItem = []
                        return
                Holder.__name__ = "dynamicItems_Holder"
                self.pyclass = Holder




    class ABFindContactsPagedRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABFindContactsPagedRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABFindContactsPagedRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"filterOptionsType",lazy=False)(pname=(ns,"filterOptions"), aname="_filterOptions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"abView"), aname="_abView", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"extendedContent"), aname="_extendedContent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"abHandleType",lazy=False)(pname=(ns,"abHandle"), aname="_abHandle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filterOptions = None
                    self._abView = None
                    self._extendedContent = None
                    self._abHandle = None
                    return
            Holder.__name__ = "ABFindContactsPagedRequestType_Holder"
            self.pyclass = Holder

    class ABFindContactsPagedResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ABFindContactsPagedResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ABFindContactsPagedResultType_Def.schema
            TClist = [self.__class__.Groups_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.Contacts_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.ADDRESS,"CircleResultType",lazy=False)(pname=(ns,"CircleResult"), aname="_CircleResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      self.__class__.Ab_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Groups = None
                    self._Contacts = None
                    self._CircleResult = None
                    self._Ab = None
                    return
            Holder.__name__ = "ABFindContactsPagedResultType_Holder"
            self.pyclass = Holder


        class Groups_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Groups"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindContactsPagedResultType_Def.Groups_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"GroupType",lazy=False)(pname=(ns,"Group"), aname="_Group", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Groups")
                kw["aname"] = "_Groups"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Group = []
                        return
                Holder.__name__ = "Groups_Holder"
                self.pyclass = Holder





        class Contacts_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Contacts"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindContactsPagedResultType_Def.Contacts_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Contacts")
                kw["aname"] = "_Contacts"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Contact = []
                        return
                Holder.__name__ = "Contacts_Holder"
                self.pyclass = Holder





        class Ab_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Ab"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ABFindContactsPagedResultType_Def.Ab_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"abInfoType",lazy=False)(pname=(ns,"abInfo"), aname="_abInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastChange"), aname="_lastChange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DynamicItemLastChanged"), aname="_DynamicItemLastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RecentActivityItemLastChanged"), aname="_RecentActivityItemLastChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"createDate"), aname="_createDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"propertiesChanged"), aname="_propertiesChanged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Ab")
                kw["aname"] = "_Ab"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._abId = None
                        self._abInfo = None
                        self._lastChange = None
                        self._DynamicItemLastChanged = None
                        self._RecentActivityItemLastChanged = None
                        self._createDate = None
                        self._propertiesChanged = None
                        return
                Holder.__name__ = "Ab_Holder"
                self.pyclass = Holder




    class GetContactsRecentActivityRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "GetContactsRecentActivityRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.GetContactsRecentActivityRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"entityHandle",lazy=False)(pname=(ns,"entityHandle"), aname="_entityHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.locales_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"count"), aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityHandle = None
                    self._locales = None
                    self._count = None
                    return
            Holder.__name__ = "GetContactsRecentActivityRequestType_Holder"
            self.pyclass = Holder


        class locales_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "locales"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.GetContactsRecentActivityRequestType_Def.locales_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"locales")
                kw["aname"] = "_locales"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._string = []
                        return
                Holder.__name__ = "locales_Holder"
                self.pyclass = Holder




    class GetContactsRecentActivityResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "GetContactsRecentActivityResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.GetContactsRecentActivityResultType_Def.schema
            TClist = [self.__class__.Activities_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Templates_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"FeedUrl"), aname="_FeedUrl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Activities = None
                    self._Templates = None
                    self._FeedUrl = None
                    return
            Holder.__name__ = "GetContactsRecentActivityResultType_Holder"
            self.pyclass = Holder


        class Activities_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Activities"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.GetContactsRecentActivityResultType_Def.Activities_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"ActivityDetailsType",lazy=False)(pname=(ns,"ActivityDetails"), aname="_ActivityDetails", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Activities")
                kw["aname"] = "_Activities"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ActivityDetails = []
                        return
                Holder.__name__ = "Activities_Holder"
                self.pyclass = Holder





        class Templates_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Templates"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.GetContactsRecentActivityResultType_Def.Templates_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"RecentActivityTemplateContainerType",lazy=False)(pname=(ns,"RecentActivityTemplateContainer"), aname="_RecentActivityTemplateContainer", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"Templates")
                kw["aname"] = "_Templates"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._RecentActivityTemplateContainer = []
                        return
                Holder.__name__ = "Templates_Holder"
                self.pyclass = Holder




    class ManageWLConnectionRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "ManageWLConnectionRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.ManageWLConnectionRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"abHandleType",lazy=False)(pname=(ns,"abHandle"), aname="_abHandle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"contactId"), aname="_contactId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"connection"), aname="_connection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"presence"), aname="_presence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"action"), aname="_action", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"relationshipType"), aname="_relationshipType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"relationshipRole"), aname="_relationshipRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.annotations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abHandle = None
                    self._contactId = None
                    self._connection = None
                    self._presence = None
                    self._action = None
                    self._relationshipType = None
                    self._relationshipRole = None
                    self._annotations = None
                    return
            Holder.__name__ = "ManageWLConnectionRequestType_Holder"
            self.pyclass = Holder


        class annotations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "annotations"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.ManageWLConnectionRequestType_Def.annotations_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"Annotation",lazy=False)(pname=(ns,"Annotation"), aname="_Annotation", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"annotations")
                kw["aname"] = "_annotations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Annotation = []
                        return
                Holder.__name__ = "annotations_Holder"
                self.pyclass = Holder




    class CreateContactType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CreateContactType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CreateContactType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"abHandleType",lazy=False)(pname=(ns,"abHandle"), aname="_abHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"contactHandleType",lazy=False)(pname=(ns,"contactHandle"), aname="_contactHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abHandle = None
                    self._contactHandle = None
                    return
            Holder.__name__ = "CreateContactType_Holder"
            self.pyclass = Holder

    class CreateCircleRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CreateCircleRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CreateCircleRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContentInfoType",lazy=False)(pname=(ns,"properties"), aname="_properties", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"callerInfoType",lazy=False)(pname=(ns,"callerInfo"), aname="_callerInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._properties = None
                    self._callerInfo = None
                    return
            Holder.__name__ = "CreateCircleRequestType_Holder"
            self.pyclass = Holder

    class CreateCircleResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "CreateCircleResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.CreateCircleResponseType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    return
            Holder.__name__ = "CreateCircleResponseType_Holder"
            self.pyclass = Holder

    class BreakConnectionRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "BreakConnectionRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.BreakConnectionRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"abHandleType",lazy=False)(pname=(ns,"abHandle"), aname="_abHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"contactId"), aname="_contactId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deleteContact"), aname="_deleteContact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"blockContact"), aname="_blockContact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abHandle = None
                    self._contactId = None
                    self._deleteContact = None
                    self._blockContact = None
                    return
            Holder.__name__ = "BreakConnectionRequestType_Holder"
            self.pyclass = Holder

    class BreakConnectionResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "BreakConnectionResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.BreakConnectionResponseType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BreakConnectionResponseType_Holder"
            self.pyclass = Holder

    class AddDynamicItemRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "AddDynamicItemRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.AddDynamicItemRequestType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"abId"), aname="_abId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.dynamicItems_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abId = None
                    self._dynamicItems = None
                    return
            Holder.__name__ = "AddDynamicItemRequestType_Holder"
            self.pyclass = Holder


        class dynamicItems_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "dynamicItems"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.AddDynamicItemRequestType_Def.dynamicItems_Dec.schema
                TClist = [GTD(MSNS.MSWS.ADDRESS,"BaseDynamicItemType",lazy=False)(pname=(ns,"DynamicItem"), aname="_DynamicItem", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"dynamicItems")
                kw["aname"] = "_dynamicItems"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._DynamicItem = []
                        return
                Holder.__name__ = "dynamicItems_Holder"
                self.pyclass = Holder




    class AddDynamicItemResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.ADDRESS
        type = (schema, "AddDynamicItemResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnab.AddDynamicItemResponseType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "AddDynamicItemResponseType_Holder"
            self.pyclass = Holder

    class MemberType_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "MemberType"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"MemberType")
            kw["aname"] = "_MemberType"
            ZSI.TC.String.__init__(self, **kw)
            class IHolder(str): typecode=self
            self.pyclass = IHolder
            IHolder.__name__ = "_MemberType_immutable_holder"

    class InvalidPassportUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "InvalidPassportUser"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.InvalidPassportUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"errorcode"), aname="_errorcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorstring"), aname="_errorstring", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.additionalDetails_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"InvalidPassportUser")
            kw["aname"] = "_InvalidPassportUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorcode = None
                    self._errorstring = None
                    self._additionalDetails = None
                    return
            Holder.__name__ = "InvalidPassportUser_Holder"
            self.pyclass = Holder


        class additionalDetails_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "additionalDetails"
            schema = MSNS.MSWS.ADDRESS
            def __init__(self, **kw):
                ns = msnab.InvalidPassportUser_Dec.additionalDetails_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"originalExceptionErrorMessage"), aname="_originalExceptionErrorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.ADDRESS,"additionalDetails")
                kw["aname"] = "_additionalDetails"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._originalExceptionErrorMessage = None
                        return
                Holder.__name__ = "additionalDetails_Holder"
                self.pyclass = Holder




    class ABApplicationHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABApplicationHeader"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABApplicationHeader_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"ApplicationId"), aname="_ApplicationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsMigration"), aname="_IsMigration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PartnerScenario"), aname="_PartnerScenario", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"CacheKey"), aname="_CacheKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BrandId"), aname="_BrandId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABApplicationHeader")
            kw["aname"] = "_ABApplicationHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ApplicationId = None
                    self._IsMigration = None
                    self._PartnerScenario = None
                    self._CacheKey = None
                    self._BrandId = None
                    return
            Holder.__name__ = "ABApplicationHeader_Holder"
            self.pyclass = Holder

    class ABAuthHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABAuthHeader"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABAuthHeader_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ManagedGroupRequest"), aname="_ManagedGroupRequest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TicketToken"), aname="_TicketToken", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABAuthHeader")
            kw["aname"] = "_ABAuthHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ManagedGroupRequest = None
                    self._TicketToken = None
                    return
            Holder.__name__ = "ABAuthHeader_Holder"
            self.pyclass = Holder

    class ServiceHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServiceHeader"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ServiceHeader_Dec.schema
            TClist = [ZSI.TC.Token(pname=(ns,"Version"), aname="_Version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"CacheKey"), aname="_CacheKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"CacheKeyChanged"), aname="_CacheKeyChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PreferredHostName"), aname="_PreferredHostName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"SessionId"), aname="_SessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ServiceHeader")
            kw["aname"] = "_ServiceHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Version = None
                    self._CacheKey = None
                    self._CacheKeyChanged = None
                    self._PreferredHostName = None
                    self._SessionId = None
                    return
            Holder.__name__ = "ServiceHeader_Holder"
            self.pyclass = Holder

    class FindMembership_Dec(ElementDeclaration):
        literal = "FindMembership"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"FindMembership")
            kw["aname"] = "_FindMembership"
            if msnab.FindMembershipRequestType_Def not in msnab.FindMembership_Dec.__bases__:
                bases = list(msnab.FindMembership_Dec.__bases__)
                bases.insert(0, msnab.FindMembershipRequestType_Def)
                msnab.FindMembership_Dec.__bases__ = tuple(bases)

            msnab.FindMembershipRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FindMembership_Dec_Holder"

    class FindMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FindMembershipResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.FindMembershipResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"FindMembershipResultType",lazy=False)(pname=(ns,"FindMembershipResult"), aname="_FindMembershipResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"FindMembershipResponse")
            kw["aname"] = "_FindMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FindMembershipResult = None
                    return
            Holder.__name__ = "FindMembershipResponse_Holder"
            self.pyclass = Holder

    class ABFindAll_Dec(ElementDeclaration):
        literal = "ABFindAll"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABFindAll")
            kw["aname"] = "_ABFindAll"
            if msnab.ABFindAllRequestType_Def not in msnab.ABFindAll_Dec.__bases__:
                bases = list(msnab.ABFindAll_Dec.__bases__)
                bases.insert(0, msnab.ABFindAllRequestType_Def)
                msnab.ABFindAll_Dec.__bases__ = tuple(bases)

            msnab.ABFindAllRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABFindAll_Dec_Holder"

    class ABFindAllResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABFindAllResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABFindAllResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ABFindAllResultType",lazy=False)(pname=(ns,"ABFindAllResult"), aname="_ABFindAllResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABFindAllResponse")
            kw["aname"] = "_ABFindAllResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABFindAllResult = None
                    return
            Holder.__name__ = "ABFindAllResponse_Holder"
            self.pyclass = Holder

    class ABContactAdd_Dec(ElementDeclaration):
        literal = "ABContactAdd"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABContactAdd")
            kw["aname"] = "_ABContactAdd"
            if msnab.ABContactAddRequestType_Def not in msnab.ABContactAdd_Dec.__bases__:
                bases = list(msnab.ABContactAdd_Dec.__bases__)
                bases.insert(0, msnab.ABContactAddRequestType_Def)
                msnab.ABContactAdd_Dec.__bases__ = tuple(bases)

            msnab.ABContactAddRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABContactAdd_Dec_Holder"

    class ABContactAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABContactAddResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABContactAddResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ABContactAddResultType",lazy=False)(pname=(ns,"ABContactAddResult"), aname="_ABContactAddResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABContactAddResponse")
            kw["aname"] = "_ABContactAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABContactAddResult = None
                    return
            Holder.__name__ = "ABContactAddResponse_Holder"
            self.pyclass = Holder

    class ABContactDelete_Dec(ElementDeclaration):
        literal = "ABContactDelete"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABContactDelete")
            kw["aname"] = "_ABContactDelete"
            if msnab.ABContactDeleteRequestType_Def not in msnab.ABContactDelete_Dec.__bases__:
                bases = list(msnab.ABContactDelete_Dec.__bases__)
                bases.insert(0, msnab.ABContactDeleteRequestType_Def)
                msnab.ABContactDelete_Dec.__bases__ = tuple(bases)

            msnab.ABContactDeleteRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABContactDelete_Dec_Holder"

    class ABContactDeleteResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "ABContactDeleteResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABContactDeleteResponse")
            kw["aname"] = "_ABContactDeleteResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

    class ABGroupContactAdd_Dec(ElementDeclaration):
        literal = "ABGroupContactAdd"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupContactAdd")
            kw["aname"] = "_ABGroupContactAdd"
            if msnab.ABGroupContactAddRequestType_Def not in msnab.ABGroupContactAdd_Dec.__bases__:
                bases = list(msnab.ABGroupContactAdd_Dec.__bases__)
                bases.insert(0, msnab.ABGroupContactAddRequestType_Def)
                msnab.ABGroupContactAdd_Dec.__bases__ = tuple(bases)

            msnab.ABGroupContactAddRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABGroupContactAdd_Dec_Holder"

    class ABGroupContactAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABGroupContactAddResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABGroupContactAddResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ABGroupContactAddResultType",lazy=False)(pname=(ns,"ABGroupContactAddResult"), aname="_ABGroupContactAddResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupContactAddResponse")
            kw["aname"] = "_ABGroupContactAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABGroupContactAddResult = None
                    return
            Holder.__name__ = "ABGroupContactAddResponse_Holder"
            self.pyclass = Holder

    class ABGroupAdd_Dec(ElementDeclaration):
        literal = "ABGroupAdd"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupAdd")
            kw["aname"] = "_ABGroupAdd"
            if msnab.ABGroupAddRequestType_Def not in msnab.ABGroupAdd_Dec.__bases__:
                bases = list(msnab.ABGroupAdd_Dec.__bases__)
                bases.insert(0, msnab.ABGroupAddRequestType_Def)
                msnab.ABGroupAdd_Dec.__bases__ = tuple(bases)

            msnab.ABGroupAddRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABGroupAdd_Dec_Holder"

    class ABGroupAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABGroupAddResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABGroupAddResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ABGroupAddResultType",lazy=False)(pname=(ns,"ABGroupAddResult"), aname="_ABGroupAddResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupAddResponse")
            kw["aname"] = "_ABGroupAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABGroupAddResult = None
                    return
            Holder.__name__ = "ABGroupAddResponse_Holder"
            self.pyclass = Holder

    class ABGroupUpdate_Dec(ElementDeclaration):
        literal = "ABGroupUpdate"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupUpdate")
            kw["aname"] = "_ABGroupUpdate"
            if msnab.ABGroupUpdateRequestType_Def not in msnab.ABGroupUpdate_Dec.__bases__:
                bases = list(msnab.ABGroupUpdate_Dec.__bases__)
                bases.insert(0, msnab.ABGroupUpdateRequestType_Def)
                msnab.ABGroupUpdate_Dec.__bases__ = tuple(bases)

            msnab.ABGroupUpdateRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABGroupUpdate_Dec_Holder"

    class ABGroupUpdateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABGroupUpdateResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABGroupUpdateResponse_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupUpdateResponse")
            kw["aname"] = "_ABGroupUpdateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ABGroupUpdateResponse_Holder"
            self.pyclass = Holder

    class ABGroupDelete_Dec(ElementDeclaration):
        literal = "ABGroupDelete"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupDelete")
            kw["aname"] = "_ABGroupDelete"
            if msnab.ABGroupDeleteRequestType_Def not in msnab.ABGroupDelete_Dec.__bases__:
                bases = list(msnab.ABGroupDelete_Dec.__bases__)
                bases.insert(0, msnab.ABGroupDeleteRequestType_Def)
                msnab.ABGroupDelete_Dec.__bases__ = tuple(bases)

            msnab.ABGroupDeleteRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABGroupDelete_Dec_Holder"

    class ABGroupDeleteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABGroupDeleteResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABGroupDeleteResponse_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupDeleteResponse")
            kw["aname"] = "_ABGroupDeleteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ABGroupDeleteResponse_Holder"
            self.pyclass = Holder

    class ABContactUpdate_Dec(ElementDeclaration):
        literal = "ABContactUpdate"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABContactUpdate")
            kw["aname"] = "_ABContactUpdate"
            if msnab.ABContactUpdateRequestType_Def not in msnab.ABContactUpdate_Dec.__bases__:
                bases = list(msnab.ABContactUpdate_Dec.__bases__)
                bases.insert(0, msnab.ABContactUpdateRequestType_Def)
                msnab.ABContactUpdate_Dec.__bases__ = tuple(bases)

            msnab.ABContactUpdateRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABContactUpdate_Dec_Holder"

    class ABContactUpdateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABContactUpdateResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABContactUpdateResponse_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABContactUpdateResponse")
            kw["aname"] = "_ABContactUpdateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ABContactUpdateResponse_Holder"
            self.pyclass = Holder

    class ABGroupContactDelete_Dec(ElementDeclaration):
        literal = "ABGroupContactDelete"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupContactDelete")
            kw["aname"] = "_ABGroupContactDelete"
            if msnab.ABGroupContactDeleteRequestType_Def not in msnab.ABGroupContactDelete_Dec.__bases__:
                bases = list(msnab.ABGroupContactDelete_Dec.__bases__)
                bases.insert(0, msnab.ABGroupContactDeleteRequestType_Def)
                msnab.ABGroupContactDelete_Dec.__bases__ = tuple(bases)

            msnab.ABGroupContactDeleteRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABGroupContactDelete_Dec_Holder"

    class ABGroupContactDeleteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABGroupContactDeleteResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABGroupContactDeleteResponse_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABGroupContactDeleteResponse")
            kw["aname"] = "_ABGroupContactDeleteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ABGroupContactDeleteResponse_Holder"
            self.pyclass = Holder

    class AddMember_Dec(ElementDeclaration):
        literal = "AddMember"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"AddMember")
            kw["aname"] = "_AddMember"
            if msnab.AddMemberRequestType_Def not in msnab.AddMember_Dec.__bases__:
                bases = list(msnab.AddMember_Dec.__bases__)
                bases.insert(0, msnab.AddMemberRequestType_Def)
                msnab.AddMember_Dec.__bases__ = tuple(bases)

            msnab.AddMemberRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AddMember_Dec_Holder"

    class AddMemberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddMemberResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.AddMemberResponse_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.MSWS.ADDRESS,"AddMemberResponse")
            kw["aname"] = "_AddMemberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "AddMemberResponse_Holder"
            self.pyclass = Holder

    class DeleteMember_Dec(ElementDeclaration):
        literal = "DeleteMember"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"DeleteMember")
            kw["aname"] = "_DeleteMember"
            if msnab.DeleteMemberRequestType_Def not in msnab.DeleteMember_Dec.__bases__:
                bases = list(msnab.DeleteMember_Dec.__bases__)
                bases.insert(0, msnab.DeleteMemberRequestType_Def)
                msnab.DeleteMember_Dec.__bases__ = tuple(bases)

            msnab.DeleteMemberRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeleteMember_Dec_Holder"

    class DeleteMemberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeleteMemberResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.DeleteMemberResponse_Dec.schema
            TClist = []
            kw["pname"] = (MSNS.MSWS.ADDRESS,"DeleteMemberResponse")
            kw["aname"] = "_DeleteMemberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "DeleteMemberResponse_Holder"
            self.pyclass = Holder

    class ABAddResponse_Dec(ElementDeclaration):
        literal = "ABAddResponse"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABAddResponse")
            kw["aname"] = "_ABAddResponse"
            if msnab.ABAddResponseType_Def not in msnab.ABAddResponse_Dec.__bases__:
                bases = list(msnab.ABAddResponse_Dec.__bases__)
                bases.insert(0, msnab.ABAddResponseType_Def)
                msnab.ABAddResponse_Dec.__bases__ = tuple(bases)

            msnab.ABAddResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABAddResponse_Dec_Holder"

    class ABAdd_Dec(ElementDeclaration):
        literal = "ABAdd"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABAdd")
            kw["aname"] = "_ABAdd"
            if msnab.ABAddRequestType_Def not in msnab.ABAdd_Dec.__bases__:
                bases = list(msnab.ABAdd_Dec.__bases__)
                bases.insert(0, msnab.ABAddRequestType_Def)
                msnab.ABAdd_Dec.__bases__ = tuple(bases)

            msnab.ABAddRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABAdd_Dec_Holder"

    class UpdateDynamicItem_Dec(ElementDeclaration):
        literal = "UpdateDynamicItem"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"UpdateDynamicItem")
            kw["aname"] = "_UpdateDynamicItem"
            if msnab.UpdateDynamicItemRequestType_Def not in msnab.UpdateDynamicItem_Dec.__bases__:
                bases = list(msnab.UpdateDynamicItem_Dec.__bases__)
                bases.insert(0, msnab.UpdateDynamicItemRequestType_Def)
                msnab.UpdateDynamicItem_Dec.__bases__ = tuple(bases)

            msnab.UpdateDynamicItemRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UpdateDynamicItem_Dec_Holder"

    class UpdateDynamicItemResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "UpdateDynamicItemResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"UpdateDynamicItemResponse")
            kw["aname"] = "_UpdateDynamicItemResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

    class ABFindContactsPaged_Dec(ElementDeclaration):
        literal = "ABFindContactsPaged"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABFindContactsPaged")
            kw["aname"] = "_ABFindContactsPaged"
            if msnab.ABFindContactsPagedRequestType_Def not in msnab.ABFindContactsPaged_Dec.__bases__:
                bases = list(msnab.ABFindContactsPaged_Dec.__bases__)
                bases.insert(0, msnab.ABFindContactsPagedRequestType_Def)
                msnab.ABFindContactsPaged_Dec.__bases__ = tuple(bases)

            msnab.ABFindContactsPagedRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ABFindContactsPaged_Dec_Holder"

    class ABFindContactsPagedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ABFindContactsPagedResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ABFindContactsPagedResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ABFindContactsPagedResultType",lazy=False)(pname=(ns,"ABFindContactsPagedResult"), aname="_ABFindContactsPagedResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ABFindContactsPagedResponse")
            kw["aname"] = "_ABFindContactsPagedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ABFindContactsPagedResult = None
                    return
            Holder.__name__ = "ABFindContactsPagedResponse_Holder"
            self.pyclass = Holder

    class WNApplicationHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "WNApplicationHeader"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.WNApplicationHeader_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"Guid",lazy=False)(pname=(ns,"ApplicationId"), aname="_ApplicationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"WNApplicationHeader")
            kw["aname"] = "_WNApplicationHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ApplicationId = None
                    return
            Holder.__name__ = "WNApplicationHeader_Holder"
            self.pyclass = Holder

    class WNAuthHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "WNAuthHeader"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.WNAuthHeader_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"TicketToken"), aname="_TicketToken", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"WNAuthHeader")
            kw["aname"] = "_WNAuthHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TicketToken = None
                    return
            Holder.__name__ = "WNAuthHeader_Holder"
            self.pyclass = Holder

    class WNServiceHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "WNServiceHeader"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.WNServiceHeader_Dec.schema
            TClist = [ZSI.TC.Token(pname=(ns,"Version"), aname="_Version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"CacheKey"), aname="_CacheKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"CacheKeyChanged"), aname="_CacheKeyChanged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PreferredHostName"), aname="_PreferredHostName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"WNServiceHeader")
            kw["aname"] = "_WNServiceHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Version = None
                    self._CacheKey = None
                    self._CacheKeyChanged = None
                    self._PreferredHostName = None
                    return
            Holder.__name__ = "WNServiceHeader_Holder"
            self.pyclass = Holder

    class GetContactsRecentActivity_Dec(ElementDeclaration):
        literal = "GetContactsRecentActivity"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"GetContactsRecentActivity")
            kw["aname"] = "_GetContactsRecentActivity"
            if msnab.GetContactsRecentActivityRequestType_Def not in msnab.GetContactsRecentActivity_Dec.__bases__:
                bases = list(msnab.GetContactsRecentActivity_Dec.__bases__)
                bases.insert(0, msnab.GetContactsRecentActivityRequestType_Def)
                msnab.GetContactsRecentActivity_Dec.__bases__ = tuple(bases)

            msnab.GetContactsRecentActivityRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetContactsRecentActivity_Dec_Holder"

    class GetContactsRecentActivityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetContactsRecentActivityResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.GetContactsRecentActivityResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"GetContactsRecentActivityResultType",lazy=False)(pname=(ns,"GetContactsRecentActivityResult"), aname="_GetContactsRecentActivityResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"GetContactsRecentActivityResponse")
            kw["aname"] = "_GetContactsRecentActivityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetContactsRecentActivityResult = None
                    return
            Holder.__name__ = "GetContactsRecentActivityResponse_Holder"
            self.pyclass = Holder

    class ManageWLConnection_Dec(ElementDeclaration):
        literal = "ManageWLConnection"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ManageWLConnection")
            kw["aname"] = "_ManageWLConnection"
            if msnab.ManageWLConnectionRequestType_Def not in msnab.ManageWLConnection_Dec.__bases__:
                bases = list(msnab.ManageWLConnection_Dec.__bases__)
                bases.insert(0, msnab.ManageWLConnectionRequestType_Def)
                msnab.ManageWLConnection_Dec.__bases__ = tuple(bases)

            msnab.ManageWLConnectionRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ManageWLConnection_Dec_Holder"

    class ManageWLConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ManageWLConnectionResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.ManageWLConnectionResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"ManageWLConnectionResult"), aname="_ManageWLConnectionResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"ManageWLConnectionResponse")
            kw["aname"] = "_ManageWLConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ManageWLConnectionResult = None
                    return
            Holder.__name__ = "ManageWLConnectionResponse_Holder"
            self.pyclass = Holder

    class CreateContact_Dec(ElementDeclaration):
        literal = "CreateContact"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"CreateContact")
            kw["aname"] = "_CreateContact"
            if msnab.CreateContactType_Def not in msnab.CreateContact_Dec.__bases__:
                bases = list(msnab.CreateContact_Dec.__bases__)
                bases.insert(0, msnab.CreateContactType_Def)
                msnab.CreateContact_Dec.__bases__ = tuple(bases)

            msnab.CreateContactType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateContact_Dec_Holder"

    class CreateContactResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreateContactResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.CreateContactResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"ContactType",lazy=False)(pname=(ns,"CreateContactResult"), aname="_CreateContactResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"CreateContactResponse")
            kw["aname"] = "_CreateContactResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CreateContactResult = None
                    return
            Holder.__name__ = "CreateContactResponse_Holder"
            self.pyclass = Holder

    class CreateCircle_Dec(ElementDeclaration):
        literal = "CreateCircle"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"CreateCircle")
            kw["aname"] = "_CreateCircle"
            if msnab.CreateCircleRequestType_Def not in msnab.CreateCircle_Dec.__bases__:
                bases = list(msnab.CreateCircle_Dec.__bases__)
                bases.insert(0, msnab.CreateCircleRequestType_Def)
                msnab.CreateCircle_Dec.__bases__ = tuple(bases)

            msnab.CreateCircleRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateCircle_Dec_Holder"

    class CreateCircleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreateCircleResponse"
        schema = MSNS.MSWS.ADDRESS
        def __init__(self, **kw):
            ns = msnab.CreateCircleResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.ADDRESS,"CreateCircleResponseType",lazy=False)(pname=(ns,"CreateCircleResult"), aname="_CreateCircleResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.ADDRESS,"CreateCircleResponse")
            kw["aname"] = "_CreateCircleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CreateCircleResult = None
                    return
            Holder.__name__ = "CreateCircleResponse_Holder"
            self.pyclass = Holder

    class BreakConnection_Dec(ElementDeclaration):
        literal = "BreakConnection"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"BreakConnection")
            kw["aname"] = "_BreakConnection"
            if msnab.BreakConnectionRequestType_Def not in msnab.BreakConnection_Dec.__bases__:
                bases = list(msnab.BreakConnection_Dec.__bases__)
                bases.insert(0, msnab.BreakConnectionRequestType_Def)
                msnab.BreakConnection_Dec.__bases__ = tuple(bases)

            msnab.BreakConnectionRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "BreakConnection_Dec_Holder"

    class BreakConnectionResponse_Dec(ElementDeclaration):
        literal = "BreakConnectionResponse"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"BreakConnectionResponse")
            kw["aname"] = "_BreakConnectionResponse"
            if msnab.BreakConnectionResponseType_Def not in msnab.BreakConnectionResponse_Dec.__bases__:
                bases = list(msnab.BreakConnectionResponse_Dec.__bases__)
                bases.insert(0, msnab.BreakConnectionResponseType_Def)
                msnab.BreakConnectionResponse_Dec.__bases__ = tuple(bases)

            msnab.BreakConnectionResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "BreakConnectionResponse_Dec_Holder"

    class AddDynamicItem_Dec(ElementDeclaration):
        literal = "AddDynamicItem"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"AddDynamicItem")
            kw["aname"] = "_AddDynamicItem"
            if msnab.AddDynamicItemRequestType_Def not in msnab.AddDynamicItem_Dec.__bases__:
                bases = list(msnab.AddDynamicItem_Dec.__bases__)
                bases.insert(0, msnab.AddDynamicItemRequestType_Def)
                msnab.AddDynamicItem_Dec.__bases__ = tuple(bases)

            msnab.AddDynamicItemRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AddDynamicItem_Dec_Holder"

    class AddDynamicItemResponse_Dec(ElementDeclaration):
        literal = "AddDynamicItemResponse"
        schema = MSNS.MSWS.ADDRESS
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.ADDRESS,"AddDynamicItemResponse")
            kw["aname"] = "_AddDynamicItemResponse"
            if msnab.AddDynamicItemResponseType_Def not in msnab.AddDynamicItemResponse_Dec.__bases__:
                bases = list(msnab.AddDynamicItemResponse_Dec.__bases__)
                bases.insert(0, msnab.AddDynamicItemResponseType_Def)
                msnab.AddDynamicItemResponse_Dec.__bases__ = tuple(bases)

            msnab.AddDynamicItemResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AddDynamicItemResponse_Dec_Holder"

# end class msnab (tns: http://www.msn.com/webservices/AddressBook)
