##################################################
# file: StorageService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

import ZSI.wstools.Namespaces as NS
from msn.SOAP import Namespaces as MSNS

##############################
# targetNamespace
# http://www.msn.com/webservices/storage/2008
##############################

class msnss:
    targetNamespace = MSNS.MSWS.STORAGE

    class Alias_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "Alias")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.Alias_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NameSpace"), aname="_NameSpace", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._NameSpace = None
                    return
            Holder.__name__ = "Alias_Holder"
            self.pyclass = Holder

    class Handle_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "Handle")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.Handle_Def.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"Alias",lazy=False)(pname=(ns,"Alias"), aname="_Alias", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"RelationshipName"), aname="_RelationshipName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Alias = None
                    self._RelationshipName = None
                    self._ResourceID = None
                    return
            Holder.__name__ = "Handle_Holder"
            self.pyclass = Holder

    class profileAttributes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "profileAttributes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.profileAttributes_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"DateModified"), aname="_DateModified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.STORAGE,"ExpressionProfileAttributesType",lazy=False)(pname=(ns,"ExpressionProfileAttributes"), aname="_ExpressionProfileAttributes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResourceID = None
                    self._DateModified = None
                    self._ExpressionProfileAttributes = None
                    return
            Holder.__name__ = "profileAttributes_Holder"
            self.pyclass = Holder

    class DocumentStream_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "DocumentStream")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.DocumentStream_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"DocumentStreamName"), aname="_DocumentStreamName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"MimeType"), aname="_MimeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Base64String(pname=(ns,"Data"), aname="_Data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"DataSize"), aname="_DataSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.URI(pname=(ns,"PreAuthURL"), aname="_PreAuthURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.URI(pname=(ns,"PreAuthURLPartner"), aname="_PreAuthURLPartner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"DocumentStreamType"), aname="_DocumentStreamType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"WriteMode"), aname="_WriteMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"StreamVersion"), aname="_StreamVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Base64String(pname=(ns,"SHA1Hash"), aname="_SHA1Hash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"Genie"), aname="_Genie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DocumentStreamName = None
                    self._MimeType = None
                    self._Data = None
                    self._DataSize = None
                    self._PreAuthURL = None
                    self._PreAuthURLPartner = None
                    self._DocumentStreamType = None
                    self._WriteMode = None
                    self._StreamVersion = None
                    self._SHA1Hash = None
                    self._Genie = None
                    return
            Holder.__name__ = "DocumentStream_Holder"
            self.pyclass = Holder

    class PhotoStream_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.STORAGE
        type = (schema, "PhotoStream")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnss.PhotoStream_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"SizeX"), aname="_SizeX", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SizeY"), aname="_SizeY", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnss.DocumentStream_Def not in msnss.PhotoStream_Def.__bases__:
                bases = list(msnss.PhotoStream_Def.__bases__)
                bases.insert(0, msnss.DocumentStream_Def)
                msnss.PhotoStream_Def.__bases__ = tuple(bases)

            msnss.DocumentStream_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Relationship_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "Relationship")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.Relationship_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"SourceID"), aname="_SourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SourceType"), aname="_SourceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TargetID"), aname="_TargetID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TargetType"), aname="_TargetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RelationshipName"), aname="_RelationshipName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SourceID = None
                    self._SourceType = None
                    self._TargetID = None
                    self._TargetType = None
                    self._RelationshipName = None
                    return
            Holder.__name__ = "Relationship_Holder"
            self.pyclass = Holder

    class ExpressionProfileAttributesType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "ExpressionProfileAttributesType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.ExpressionProfileAttributesType_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"DateModified"), aname="_DateModified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"DisplayNameLastModified"), aname="_DisplayNameLastModified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"PersonalStatus"), aname="_PersonalStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"PersonalStatusLastModified"), aname="_PersonalStatusLastModified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"StaticUserTilePublicURL"), aname="_StaticUserTilePublicURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"Photo"), aname="_Photo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"Attachments"), aname="_Attachments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.Boolean(pname=(ns,"Flag"), aname="_Flag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResourceID = None
                    self._DateModified = None
                    self._DisplayName = None
                    self._DisplayNameLastModified = None
                    self._PersonalStatus = None
                    self._PersonalStatusLastModified = None
                    self._StaticUserTilePublicURL = None
                    self._Photo = None
                    self._Attachments = None
                    self._Flag = None
                    return
            Holder.__name__ = "ExpressionProfileAttributesType_Holder"
            self.pyclass = Holder

    class documentBaseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "documentBaseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.documentBaseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"ItemType"), aname="_ItemType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"DateModified"), aname="_DateModified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.DocumentStreams_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResourceID = None
                    self._Name = None
                    self._ItemType = None
                    self._DateModified = None
                    self._DocumentStreams = None
                    return
            Holder.__name__ = "documentBaseType_Holder"
            self.pyclass = Holder


        class DocumentStreams_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "DocumentStreams"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.documentBaseType_Def.DocumentStreams_Dec.schema
                TClist = [GTD(MSNS.MSWS.STORAGE,"DocumentStream",lazy=False)(pname=(ns,"DocumentStream"), aname="_DocumentStream", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"DocumentStreams")
                kw["aname"] = "_DocumentStreams"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._DocumentStream = []
                        return
                Holder.__name__ = "DocumentStreams_Holder"
                self.pyclass = Holder




    class Photo_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = MSNS.MSWS.STORAGE
        type = (schema, "Photo")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = msnss.Photo_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if msnss.documentBaseType_Def not in msnss.Photo_Def.__bases__:
                bases = list(msnss.Photo_Def.__bases__)
                bases.insert(0, msnss.documentBaseType_Def)
                msnss.Photo_Def.__bases__ = tuple(bases)

            msnss.documentBaseType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExpressionProfile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "ExpressionProfile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.ExpressionProfile_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"FreeText"), aname="_FreeText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"PersonalStatus"), aname="_PersonalStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname=(ns,"Flags"), aname="_Flags", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"RoleDefinitionName"), aname="_RoleDefinitionName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FreeText = None
                    self._DisplayName = None
                    self._PersonalStatus = None
                    self._Flags = None
                    self._RoleDefinitionName = None
                    return
            Holder.__name__ = "ExpressionProfile_Holder"
            self.pyclass = Holder

    class GetProfileRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "GetProfileRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.GetProfileRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"Handle",lazy=False)(pname=(ns,"profileHandle"), aname="_profileHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD(MSNS.MSWS.STORAGE,"profileAttributes",lazy=False)(pname=(ns,"profileAttributes"), aname="_profileAttributes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._profileHandle = None
                    self._profileAttributes = None
                    return
            Holder.__name__ = "GetProfileRequestType_Holder"
            self.pyclass = Holder

    class GetProfileResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "GetProfileResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.GetProfileResultType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname=(ns,"DateModified"), aname="_DateModified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.ExpressionProfile_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResourceID = None
                    self._DateModified = None
                    self._ExpressionProfile = None
                    return
            Holder.__name__ = "GetProfileResultType_Holder"
            self.pyclass = Holder


        class ExpressionProfile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ExpressionProfile"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.GetProfileResultType_Def.ExpressionProfile_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TC.String(pname=(ns,"DateModified"), aname="_DateModified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TCnumbers.Iint(pname=(ns,"Version"), aname="_Version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TCnumbers.Iint(pname=(ns,"Flags"), aname="_Flags", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                          GTD(MSNS.MSWS.STORAGE,"documentBaseType",lazy=False)(pname=(ns,"Photo"), aname="_Photo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          self.__class__.Attachments_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                          ZSI.TC.String(pname=(ns,"PersonalStatus"), aname="_PersonalStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TC.String(pname=(ns,"PersonalStatusLastModified"), aname="_PersonalStatusLastModified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TC.String(pname=(ns,"DisplayNameLastModified"), aname="_DisplayNameLastModified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TC.URI(pname=(ns,"StaticUserTilePublicURL"), aname="_StaticUserTilePublicURL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]

                kw["pname"] = (MSNS.MSWS.STORAGE,"ExpressionProfile")
                kw["aname"] = "_ExpressionProfile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ResourceID = None
                        self._DateModified = None
                        self._Version = None
                        self._Flags = None
                        self._Photo = None
                        self._Attachments = None
                        self._PersonalStatus = None
                        self._PersonalStatusLastModified = None
                        self._DisplayName = None
                        self._DisplayNameLastModified = None
                        self._StaticUserTilePublicURL = None
                        return
                Holder.__name__ = "ExpressionProfile_Holder"
                self.pyclass = Holder


            class Attachments_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Attachments"
                schema = MSNS.MSWS.STORAGE
                def __init__(self, **kw):
                    ns = msnss.GetProfileResultType_Def.ExpressionProfile_Dec.Attachments_Dec.schema
                    TClist = [GTD(MSNS.MSWS.STORAGE,"documentBaseType",lazy=False)(pname=(ns,"Document"), aname="_Document", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = (MSNS.MSWS.STORAGE,"Attachments")
                    kw["aname"] = "_Attachments"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._Document = []
                            return
                    Holder.__name__ = "Attachments_Holder"
                    self.pyclass = Holder







    class UpdateProfileRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "UpdateProfileRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.UpdateProfileRequestType_Def.schema
            TClist = [self.__class__.profile_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.profileAttributesToDelete_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._profile = None
                    self._profileAttributesToDelete = None
                    return
            Holder.__name__ = "UpdateProfileRequestType_Holder"
            self.pyclass = Holder


        class profile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "profile"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.UpdateProfileRequestType_Def.profile_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.STORAGE,"ExpressionProfile",lazy=False)(pname=(ns,"ExpressionProfile"), aname="_ExpressionProfile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"profile")
                kw["aname"] = "_profile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ResourceID = None
                        self._ExpressionProfile = None
                        return
                Holder.__name__ = "profile_Holder"
                self.pyclass = Holder





        class profileAttributesToDelete_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "profileAttributesToDelete"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.UpdateProfileRequestType_Def.profileAttributesToDelete_Dec.schema
                TClist = [GTD(MSNS.MSWS.STORAGE,"ExpressionProfileAttributesType",lazy=False)(pname=(ns,"ExpressionProfileAttributes"), aname="_ExpressionProfileAttributes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"profileAttributesToDelete")
                kw["aname"] = "_profileAttributesToDelete"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ExpressionProfileAttributes = None
                        return
                Holder.__name__ = "profileAttributesToDelete_Holder"
                self.pyclass = Holder




    class FindDocumentsRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "FindDocumentsRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.FindDocumentsRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"Handle",lazy=False)(pname=(ns,"objectHandle"), aname="_objectHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      self.__class__.documentAttributes_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.documentFilter_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.documentSort_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")),
                      self.__class__.findContext_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectHandle = None
                    self._documentAttributes = None
                    self._documentFilter = None
                    self._documentSort = None
                    self._findContext = None
                    return
            Holder.__name__ = "FindDocumentsRequestType_Holder"
            self.pyclass = Holder


        class documentAttributes_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "documentAttributes"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.FindDocumentsRequestType_Def.documentAttributes_Dec.schema
                TClist = [ZSI.TC.Boolean(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TC.Boolean(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"documentAttributes")
                kw["aname"] = "_documentAttributes"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ResourceID = None
                        self._Name = None
                        return
                Holder.__name__ = "documentAttributes_Holder"
                self.pyclass = Holder





        class documentFilter_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "documentFilter"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.FindDocumentsRequestType_Def.documentFilter_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"FilterAttributes"), aname="_FilterAttributes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"documentFilter")
                kw["aname"] = "_documentFilter"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._FilterAttributes = None
                        return
                Holder.__name__ = "documentFilter_Holder"
                self.pyclass = Holder





        class documentSort_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "documentSort"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.FindDocumentsRequestType_Def.documentSort_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"SortBy"), aname="_SortBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"documentSort")
                kw["aname"] = "_documentSort"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._SortBy = None
                        return
                Holder.__name__ = "documentSort_Holder"
                self.pyclass = Holder





        class findContext_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "findContext"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.FindDocumentsRequestType_Def.findContext_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"FindMethod"), aname="_FindMethod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                          ZSI.TCnumbers.Iint(pname=(ns,"ChunkSize"), aname="_ChunkSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"findContext")
                kw["aname"] = "_findContext"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._FindMethod = None
                        self._ChunkSize = None
                        return
                Holder.__name__ = "findContext_Holder"
                self.pyclass = Holder




    class FindDocumentsResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "FindDocumentsResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.FindDocumentsResultType_Def.schema
            TClist = [self.__class__.Document_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Document = None
                    return
            Holder.__name__ = "FindDocumentsResultType_Holder"
            self.pyclass = Holder


        class Document_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Document"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.FindDocumentsResultType_Def.Document_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ResourceID"), aname="_ResourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"Document")
                kw["aname"] = "_Document"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ResourceID = None
                        self._Name = None
                        return
                Holder.__name__ = "Document_Holder"
                self.pyclass = Holder




    class CreateProfileRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "CreateProfileRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.CreateProfileRequestType_Def.schema
            TClist = [self.__class__.profile_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._profile = None
                    return
            Holder.__name__ = "CreateProfileRequestType_Holder"
            self.pyclass = Holder


        class profile_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "profile"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.CreateProfileRequestType_Def.profile_Dec.schema
                TClist = [GTD(MSNS.MSWS.STORAGE,"ExpressionProfile",lazy=False)(pname=(ns,"ExpressionProfile"), aname="_ExpressionProfile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"profile")
                kw["aname"] = "_profile"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ExpressionProfile = None
                        return
                Holder.__name__ = "profile_Holder"
                self.pyclass = Holder




    class ShareItemRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "ShareItemRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.ShareItemRequestType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"resourceID"), aname="_resourceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayName"), aname="_displayName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resourceID = None
                    self._displayName = None
                    return
            Holder.__name__ = "ShareItemRequestType_Holder"
            self.pyclass = Holder

    class ShareItemResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "ShareItemResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.ShareItemResponseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ShareItemResult"), aname="_ShareItemResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ShareItemResult = None
                    return
            Holder.__name__ = "ShareItemResponseType_Holder"
            self.pyclass = Holder

    class UpdateDocumentRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "UpdateDocumentRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.UpdateDocumentRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"documentBaseType",lazy=False)(pname=(ns,"document"), aname="_document", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._document = None
                    return
            Holder.__name__ = "UpdateDocumentRequestType_Holder"
            self.pyclass = Holder

    class CreateDocumentRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "CreateDocumentRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.CreateDocumentRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"Handle",lazy=False)(pname=(ns,"parentHandle"), aname="_parentHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD(MSNS.MSWS.STORAGE,"documentBaseType",lazy=False)(pname=(ns,"document"), aname="_document", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationshipName"), aname="_relationshipName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parentHandle = None
                    self._document = None
                    self._relationshipName = None
                    return
            Holder.__name__ = "CreateDocumentRequestType_Holder"
            self.pyclass = Holder

    class CreateDocumentResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "CreateDocumentResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.CreateDocumentResponseType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CreateDocumentResult"), aname="_CreateDocumentResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CreateDocumentResult = None
                    return
            Holder.__name__ = "CreateDocumentResponseType_Holder"
            self.pyclass = Holder

    class CreateRelationshipsRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "CreateRelationshipsRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.CreateRelationshipsRequestType_Def.schema
            TClist = [self.__class__.relationships_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._relationships = None
                    return
            Holder.__name__ = "CreateRelationshipsRequestType_Holder"
            self.pyclass = Holder


        class relationships_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "relationships"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.CreateRelationshipsRequestType_Def.relationships_Dec.schema
                TClist = [GTD(MSNS.MSWS.STORAGE,"Relationship",lazy=False)(pname=(ns,"Relationship"), aname="_Relationship", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"relationships")
                kw["aname"] = "_relationships"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Relationship = []
                        return
                Holder.__name__ = "relationships_Holder"
                self.pyclass = Holder




    class DeleteRelationshipsRequestType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = MSNS.MSWS.STORAGE
        type = (schema, "DeleteRelationshipsRequestType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = msnss.DeleteRelationshipsRequestType_Def.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"Handle",lazy=False)(pname=(ns,"sourceHandle"), aname="_sourceHandle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.targetHandles_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sourceHandle = None
                    self._targetHandles = None
                    return
            Holder.__name__ = "DeleteRelationshipsRequestType_Holder"
            self.pyclass = Holder


        class targetHandles_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "targetHandles"
            schema = MSNS.MSWS.STORAGE
            def __init__(self, **kw):
                ns = msnss.DeleteRelationshipsRequestType_Def.targetHandles_Dec.schema
                TClist = [GTD(MSNS.MSWS.STORAGE,"Handle",lazy=False)(pname=(ns,"ObjectHandle"), aname="_ObjectHandle", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = (MSNS.MSWS.STORAGE,"targetHandles")
                kw["aname"] = "_targetHandles"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ObjectHandle = []
                        return
                Holder.__name__ = "targetHandles_Holder"
                self.pyclass = Holder




    class StorageApplicationHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StorageApplicationHeader"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            ns = msnss.StorageApplicationHeader_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ApplicationID"), aname="_ApplicationID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Scenario"), aname="_Scenario", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.STORAGE,"StorageApplicationHeader")
            kw["aname"] = "_StorageApplicationHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ApplicationID = None
                    self._Scenario = None
                    return
            Holder.__name__ = "StorageApplicationHeader_Holder"
            self.pyclass = Holder

    class StorageUserHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StorageUserHeader"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            ns = msnss.StorageUserHeader_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Puid"), aname="_Puid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Cid"), aname="_Cid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"TicketToken"), aname="_TicketToken", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsAdmin"), aname="_IsAdmin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.STORAGE,"StorageUserHeader")
            kw["aname"] = "_StorageUserHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Puid = None
                    self._Cid = None
                    self._TicketToken = None
                    self._IsAdmin = None
                    return
            Holder.__name__ = "StorageUserHeader_Holder"
            self.pyclass = Holder

    class AffinityCacheHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AffinityCacheHeader"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            ns = msnss.AffinityCacheHeader_Dec.schema
            TClist = [ZSI.TC.Token(pname=(ns,"CacheKey"), aname="_CacheKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.STORAGE,"AffinityCacheHeader")
            kw["aname"] = "_AffinityCacheHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CacheKey = None
                    return
            Holder.__name__ = "AffinityCacheHeader_Holder"
            self.pyclass = Holder

    class GetProfile_Dec(ElementDeclaration):
        literal = "GetProfile"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"GetProfile")
            kw["aname"] = "_GetProfile"
            if msnss.GetProfileRequestType_Def not in msnss.GetProfile_Dec.__bases__:
                bases = list(msnss.GetProfile_Dec.__bases__)
                bases.insert(0, msnss.GetProfileRequestType_Def)
                msnss.GetProfile_Dec.__bases__ = tuple(bases)

            msnss.GetProfileRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetProfile_Dec_Holder"

    class GetProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetProfileResponse"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            ns = msnss.GetProfileResponse_Dec.schema
            TClist = [GTD(MSNS.MSWS.STORAGE,"GetProfileResultType",lazy=False)(pname=(ns,"GetProfileResult"), aname="_GetProfileResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.STORAGE,"GetProfileResponse")
            kw["aname"] = "_GetProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetProfileResult = None
                    return
            Holder.__name__ = "GetProfileResponse_Holder"
            self.pyclass = Holder

    class UpdateProfile_Dec(ElementDeclaration):
        literal = "UpdateProfile"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"UpdateProfile")
            kw["aname"] = "_UpdateProfile"
            if msnss.UpdateProfileRequestType_Def not in msnss.UpdateProfile_Dec.__bases__:
                bases = list(msnss.UpdateProfile_Dec.__bases__)
                bases.insert(0, msnss.UpdateProfileRequestType_Def)
                msnss.UpdateProfile_Dec.__bases__ = tuple(bases)

            msnss.UpdateProfileRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UpdateProfile_Dec_Holder"

    class UpdateProfileResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "UpdateProfileResponse"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"UpdateProfileResponse")
            kw["aname"] = "_UpdateProfileResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

    class FindDocuments_Dec(ElementDeclaration):
        literal = "FindDocuments"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"FindDocuments")
            kw["aname"] = "_FindDocuments"
            if msnss.FindDocumentsRequestType_Def not in msnss.FindDocuments_Dec.__bases__:
                bases = list(msnss.FindDocuments_Dec.__bases__)
                bases.insert(0, msnss.FindDocumentsRequestType_Def)
                msnss.FindDocuments_Dec.__bases__ = tuple(bases)

            msnss.FindDocumentsRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FindDocuments_Dec_Holder"

    class FindDocumentsResponse_Dec(ElementDeclaration):
        literal = "FindDocumentsResponse"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"FindDocumentsResponse")
            kw["aname"] = "_FindDocumentsResponse"
            if msnss.FindDocumentsResultType_Def not in msnss.FindDocumentsResponse_Dec.__bases__:
                bases = list(msnss.FindDocumentsResponse_Dec.__bases__)
                bases.insert(0, msnss.FindDocumentsResultType_Def)
                msnss.FindDocumentsResponse_Dec.__bases__ = tuple(bases)

            msnss.FindDocumentsResultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FindDocumentsResponse_Dec_Holder"

    class CreateProfile_Dec(ElementDeclaration):
        literal = "CreateProfile"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"CreateProfile")
            kw["aname"] = "_CreateProfile"
            if msnss.CreateProfileRequestType_Def not in msnss.CreateProfile_Dec.__bases__:
                bases = list(msnss.CreateProfile_Dec.__bases__)
                bases.insert(0, msnss.CreateProfileRequestType_Def)
                msnss.CreateProfile_Dec.__bases__ = tuple(bases)

            msnss.CreateProfileRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateProfile_Dec_Holder"

    class CreateProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreateProfileResponse"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            ns = msnss.CreateProfileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"CreateProfileResult"), aname="_CreateProfileResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (MSNS.MSWS.STORAGE,"CreateProfileResponse")
            kw["aname"] = "_CreateProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CreateProfileResult = None
                    return
            Holder.__name__ = "CreateProfileResponse_Holder"
            self.pyclass = Holder

    class ShareItem_Dec(ElementDeclaration):
        literal = "ShareItem"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"ShareItem")
            kw["aname"] = "_ShareItem"
            if msnss.ShareItemRequestType_Def not in msnss.ShareItem_Dec.__bases__:
                bases = list(msnss.ShareItem_Dec.__bases__)
                bases.insert(0, msnss.ShareItemRequestType_Def)
                msnss.ShareItem_Dec.__bases__ = tuple(bases)

            msnss.ShareItemRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ShareItem_Dec_Holder"

    class ShareItemResponse_Dec(ElementDeclaration):
        literal = "ShareItemResponse"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"ShareItemResponse")
            kw["aname"] = "_ShareItemResponse"
            if msnss.ShareItemResponseType_Def not in msnss.ShareItemResponse_Dec.__bases__:
                bases = list(msnss.ShareItemResponse_Dec.__bases__)
                bases.insert(0, msnss.ShareItemResponseType_Def)
                msnss.ShareItemResponse_Dec.__bases__ = tuple(bases)

            msnss.ShareItemResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ShareItemResponse_Dec_Holder"

    class UpdateDocument_Dec(ElementDeclaration):
        literal = "UpdateDocument"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"UpdateDocument")
            kw["aname"] = "_UpdateDocument"
            if msnss.UpdateDocumentRequestType_Def not in msnss.UpdateDocument_Dec.__bases__:
                bases = list(msnss.UpdateDocument_Dec.__bases__)
                bases.insert(0, msnss.UpdateDocumentRequestType_Def)
                msnss.UpdateDocument_Dec.__bases__ = tuple(bases)

            msnss.UpdateDocumentRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UpdateDocument_Dec_Holder"

    class UpdateDocumentResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "UpdateDocumentResponse"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"UpdateDocumentResponse")
            kw["aname"] = "_UpdateDocumentResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

    class CreateDocument_Dec(ElementDeclaration):
        literal = "CreateDocument"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"CreateDocument")
            kw["aname"] = "_CreateDocument"
            if msnss.CreateDocumentRequestType_Def not in msnss.CreateDocument_Dec.__bases__:
                bases = list(msnss.CreateDocument_Dec.__bases__)
                bases.insert(0, msnss.CreateDocumentRequestType_Def)
                msnss.CreateDocument_Dec.__bases__ = tuple(bases)

            msnss.CreateDocumentRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateDocument_Dec_Holder"

    class CreateDocumentResponse_Dec(ElementDeclaration):
        literal = "CreateDocumentResponse"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"CreateDocumentResponse")
            kw["aname"] = "_CreateDocumentResponse"
            if msnss.CreateDocumentResponseType_Def not in msnss.CreateDocumentResponse_Dec.__bases__:
                bases = list(msnss.CreateDocumentResponse_Dec.__bases__)
                bases.insert(0, msnss.CreateDocumentResponseType_Def)
                msnss.CreateDocumentResponse_Dec.__bases__ = tuple(bases)

            msnss.CreateDocumentResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateDocumentResponse_Dec_Holder"

    class CreateRelationships_Dec(ElementDeclaration):
        literal = "CreateRelationships"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"CreateRelationships")
            kw["aname"] = "_CreateRelationships"
            if msnss.CreateRelationshipsRequestType_Def not in msnss.CreateRelationships_Dec.__bases__:
                bases = list(msnss.CreateRelationships_Dec.__bases__)
                bases.insert(0, msnss.CreateRelationshipsRequestType_Def)
                msnss.CreateRelationships_Dec.__bases__ = tuple(bases)

            msnss.CreateRelationshipsRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateRelationships_Dec_Holder"

    class CreateRelationshipsResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "CreateRelationshipsResponse"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"CreateRelationshipsResponse")
            kw["aname"] = "_CreateRelationshipsResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

    class DeleteRelationships_Dec(ElementDeclaration):
        literal = "DeleteRelationships"
        schema = MSNS.MSWS.STORAGE
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"DeleteRelationships")
            kw["aname"] = "_DeleteRelationships"
            if msnss.DeleteRelationshipsRequestType_Def not in msnss.DeleteRelationships_Dec.__bases__:
                bases = list(msnss.DeleteRelationships_Dec.__bases__)
                bases.insert(0, msnss.DeleteRelationshipsRequestType_Def)
                msnss.DeleteRelationships_Dec.__bases__ = tuple(bases)

            msnss.DeleteRelationshipsRequestType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeleteRelationships_Dec_Holder"

    class DeleteRelationshipsResponse_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "DeleteRelationshipsResponse"
        schema = MSNS.MSWS.STORAGE
        def __init__(self, **kw):
            kw["pname"] = (MSNS.MSWS.STORAGE,"DeleteRelationshipsResponse")
            kw["aname"] = "_DeleteRelationshipsResponse"
            ZSI.TC.AnyType.__init__(self, **kw)

# end class msnss (tns: http://www.msn.com/webservices/storage/2008)

