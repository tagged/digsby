##################################################
# file: StorageService_client.py
#
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     D:\workspace\digsby\Digsby.py --no-traceback-dialog --multi --server=api5.digsby.org
#
##################################################

from StorageService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

import util.callbacks as callbacks
import util.network.soap as soap
import ZSI.wstools.Namespaces as NS
from msn.SOAP import Namespaces as MSNS, MSNBindingSOAP

# Locator
class StorageServiceLocator:
    GetProfilePort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getGetProfilePortAddress(self):
        return StorageServiceLocator.GetProfilePort_address
    def getGetProfilePort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.GetProfilePort_address, **kw)
    UpdateProfilePort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getUpdateProfilePortAddress(self):
        return StorageServiceLocator.UpdateProfilePort_address
    def getUpdateProfilePort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.UpdateProfilePort_address, **kw)
    FindDocumentsPort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getFindDocumentsPortAddress(self):
        return StorageServiceLocator.FindDocumentsPort_address
    def getFindDocumentsPort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.FindDocumentsPort_address, **kw)
    CreateProfilePort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getCreateProfilePortAddress(self):
        return StorageServiceLocator.CreateProfilePort_address
    def getCreateProfilePort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.CreateProfilePort_address, **kw)
    ShareItemPort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getShareItemPortAddress(self):
        return StorageServiceLocator.ShareItemPort_address
    def getShareItemPort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.ShareItemPort_address, **kw)
    CreateDocumentPort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getCreateDocumentPortAddress(self):
        return StorageServiceLocator.CreateDocumentPort_address
    def getCreateDocumentPort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.CreateDocumentPort_address, **kw)
    UpdateDocumentPort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getUpdateDocumentPortAddress(self):
        return StorageServiceLocator.UpdateDocumentPort_address
    def getUpdateDocumentPort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.UpdateDocumentPort_address, **kw)
    CreateRelationshipsPort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getCreateRelationshipsPortAddress(self):
        return StorageServiceLocator.CreateRelationshipsPort_address
    def getCreateRelationshipsPort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.CreateRelationshipsPort_address, **kw)
    DeleteRelationshipsPort_address = "https://storage.msn.com/storageservice/SchematizedStore.asmx"
    def getDeleteRelationshipsPortAddress(self):
        return StorageServiceLocator.DeleteRelationshipsPort_address
    def getDeleteRelationshipsPort(self, url=None, **kw):
        return StorageServiceBindingSOAP(url or StorageServiceLocator.DeleteRelationshipsPort_address, **kw)

# Methods
class StorageServiceBindingSOAP(MSNBindingSOAP):
    # op: GetProfile
    @callbacks.callsback
    def GetProfile(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, GetProfileMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/GetProfile", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: UpdateProfile
    @callbacks.callsback
    def UpdateProfile(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, UpdateProfileMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/UpdateProfile", soapheaders=soapheaders,
                         callback = callback,
                         **kw)


    # op: FindDocuments
    @callbacks.callsback
    def FindDocuments(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, FindDocumentsMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/FindDocuments", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: CreateProfile
    @callbacks.callsback
    def CreateProfile(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, CreateProfileMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/CreateProfile", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: ShareItem
    @callbacks.callsback
    def ShareItem(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, ShareItemMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/ShareItem", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: CreateDocument
    @callbacks.callsback
    def CreateDocument(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, CreateDocumentMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/CreateDocument", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: UpdateDocument
    @callbacks.callsback
    def UpdateDocument(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, UpdateDocumentMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/UpdateDocument", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: CreateRelationships
    @callbacks.callsback
    def CreateRelationships(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, CreateRelationshipsMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/CreateRelationships", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

    # op: DeleteRelationships
    @callbacks.callsback
    def DeleteRelationships(self, request, soapheaders=(), callback = None, **kw):
        if isinstance(request, DeleteRelationshipsMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.RPC(None, None, request, soapaction="http://www.msn.com/webservices/storage/2008/DeleteRelationships", soapheaders=soapheaders,
                         callback = callback,
                         **kw)

GetProfileMessage                   = GED(MSNS.MSWS.STORAGE, "GetProfile").pyclass
GetProfileResponseMessage           = GED(MSNS.MSWS.STORAGE, "GetProfileResponse").pyclass
UpdateProfileMessage                = GED(MSNS.MSWS.STORAGE, "UpdateProfile").pyclass
UpdateProfileResponseMessage        = GED(MSNS.MSWS.STORAGE, "UpdateProfileResponse").pyclass
FindDocumentsMessage                = GED(MSNS.MSWS.STORAGE, "FindDocuments").pyclass
FindDocumentsResponseMessage        = GED(MSNS.MSWS.STORAGE, "FindDocumentsResponse").pyclass
CreateProfileMessage                = GED(MSNS.MSWS.STORAGE, "CreateProfile").pyclass
CreateProfileResponseMessage        = GED(MSNS.MSWS.STORAGE, "CreateProfileResponse").pyclass
ShareItemMessage                    = GED(MSNS.MSWS.STORAGE, "ShareItem").pyclass
ShareItemResponseMessage            = GED(MSNS.MSWS.STORAGE, "ShareItemResponse").pyclass
CreateDocumentMessage               = GED(MSNS.MSWS.STORAGE, "CreateDocument").pyclass
CreateDocumentResponseMessage       = GED(MSNS.MSWS.STORAGE, "CreateDocumentResponse").pyclass
UpdateDocumentMessage               = GED(MSNS.MSWS.STORAGE, "UpdateDocument").pyclass
UpdateDocumentResponseMessage       = GED(MSNS.MSWS.STORAGE, "UpdateDocumentResponse").pyclass
CreateRelationshipsMessage          = GED(MSNS.MSWS.STORAGE, "CreateRelationships").pyclass
CreateRelationshipsResponseMessage  = GED(MSNS.MSWS.STORAGE, "CreateRelationshipsResponse").pyclass
DeleteRelationshipsMessage          = GED(MSNS.MSWS.STORAGE, "DeleteRelationships").pyclass
DeleteRelationshipsResponseMessage  = GED(MSNS.MSWS.STORAGE, "DeleteRelationshipsResponse").pyclass
